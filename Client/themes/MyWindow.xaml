<ResourceDictionary 
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:TrboX"
					xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    mc:Ignorable="d" 
                    
                   >

    <Style x:Key="ButtonStyleHdr" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Padding="{TemplateBinding Padding}" Background="#00000000"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="CutOffRule"
			EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF606064" Offset="0.75"/>
        <GradientStop Color="#FF2B2B2B" Offset="0.15"/>
        <GradientStop Color="#FF1D1D1D" Offset="0.3"/>
        <GradientStop Color="#FF3B3B3D" Offset="0"/>
        <GradientStop Color="#FF3B3B3D" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush  x:Key="CutOffRuleButtom"
						EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF3B3B3D" Offset="0"/>
        <GradientStop Color="#FF2B2B2B" Offset="0.3"/>
        <GradientStop Color="#FF1D1D1D" Offset="0.6"/>
        <GradientStop Color="#FF3B3B3D" Offset="0.1"/>
    </LinearGradientBrush>

    <LinearGradientBrush  x:Key="CutOffRuleTop"
						EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF3B3B3D" Offset="0"/>
        <GradientStop Color="#FF606064" Offset="0.5"/>
        <GradientStop Color="#FF3B3B3D" Offset="1"/>
    </LinearGradientBrush>
	
	<SolidColorBrush x:Key="fbg" Color ="#FFBEBEC0" />

	<LinearGradientBrush x:Key="BorderTop"
	EndPoint="0.5,1" StartPoint="0.5,0">
                                    			<GradientStop Color="#FF242424" Offset="0"/>
                                    			<GradientStop Color="#FF3D3E40" Offset="0.5"/>
                                    			<GradientStop Color="#FF242424" Offset="1"/>
                                    		</LinearGradientBrush>

    <ControlTemplate x:Key="MainWinTemplate" TargetType="{x:Type Window}">
        <Grid>
            <Border x:Name="bdr_win" BorderBrush="#FF1D1D1F" Margin="10"  Background="#FF1D1D1F">
                <Border.Effect>
                    <DropShadowEffect Color="Black" Direction="315" BlurRadius="10" ShadowDepth="5" Opacity="0.7" />
                </Border.Effect>
                <Grid>                   
                    <DockPanel Margin="0">                      
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </DockPanel>
                </Grid>

            </Border>
        </Grid>
    	<ControlTemplate.Triggers>
    		<Trigger Property="IsEnabled" Value="False"/>
    	</ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MainWinStyle" TargetType="Window">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="Template" Value="{StaticResource MainWinTemplate}" />
    </Style>

    <Style x:Key="ComboBoxItemStyle1" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
					
					<Grid  Background="#00000000">
	
                    <Border x:Name="Bd" SnapsToDevicePixels="True" Padding="0">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Margin="10,0,0,0"/>
                    </Border>
					</Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="#FF5695DB"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="MyWindowTemplate" TargetType="{x:Type Window}">
        <Grid>
            <Border x:Name="bdr_win" BorderBrush="#FF1D1D1F"  BorderThickness="1" Margin="10"  Background="#FFffff">
                <Border.Effect>
                    <DropShadowEffect Color="Black" Direction="315" BlurRadius="10" ShadowDepth="5" Opacity="0.7" />
                </Border.Effect>
                <Grid>
                    <!--<Image Source="resource/HeaderLeft.png" HorizontalAlignment="Left" VerticalAlignment="Top" Stretch="Uniform" Height="90" />-->
                    <!--<Image Source="resource/HeaderRight.png" HorizontalAlignment="Right" VerticalAlignment="Top" Stretch="Uniform" Height="90" />-->
                    <DockPanel Margin="0">
                        <Border BorderBrush="Black" BorderThickness="0" Margin="0,0,0,0" DockPanel.Dock="Top" Height="30">
                            <Grid x:Name="grd_Header" Margin="0" Height="30" VerticalAlignment="Top">


                                <DockPanel LastChildFill="False" Margin="3,0,0,0" Height="30" HorizontalAlignment="Left">
                                    <Image Source="{TemplateBinding Icon}" Height="20" Width="20" Margin="5,0,0,0"/>
                                    <Label x:Name="lab_Title" Content="{TemplateBinding Title}" Margin="2,0,0,0" FontSize="16" HorizontalAlignment="Left" />
                                    <Label x:Name="lab_SubTitle" Content="" Margin="5,0,0,0" FontSize="12" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
                                </DockPanel>
                                <Button x:Name="btn_Header"  Style="{StaticResource ButtonStyleHdr}"></Button>
                                <DockPanel LastChildFill="False" Margin="0, 0, 5, 0"  HorizontalAlignment="Right"  VerticalAlignment="Center">

                                    <Border Width="16" Height="16" ClipToBounds="True" DockPanel.Dock="Right"  VerticalAlignment="Top" Margin="0,0">
                                        <Image x:Name="img_SysClose" Source="/TrboX;component/themes/resource/sys-1.png" Margin="-106, -6, 0, 0" Stretch="None"></Image>
                                    </Border>
                                    <Border Width="16" Height="16" ClipToBounds="True" DockPanel.Dock="Right"  VerticalAlignment="Top" Margin="5,0">
                                        <Grid>
                                            <Image x:Name="img_SysRestore" Source="/TrboX;component/themes/resource/sys-2.png" Margin="-63, -4, 0, 0" Stretch="None" Visibility="Hidden"></Image>
                                            <Image x:Name="img_SysMax" Source="/TrboX;component/themes/resource/sys-1.png" Margin="-62, -6, 0, 0" Stretch="None" ></Image>
                                        </Grid>
                                    </Border>
                                    <Border Width="16" Height="16" ClipToBounds="True" DockPanel.Dock="Right"  VerticalAlignment="Top" Margin="0,0">
                                        <Image x:Name="img_SysMin" Source="/TrboX;component/themes/resource/sys-1.png" Margin="-18, -6, 0, 0" Stretch="None"></Image>
                                    </Border>
                                </DockPanel>
                            </Grid>
                        </Border>
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>

                    </DockPanel>
                </Grid>
                
            </Border>
        </Grid>
    </ControlTemplate>


    <Style x:Key="MyWindowStyle" TargetType="Window">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="Template" Value="{StaticResource MainWinTemplate}" />
    </Style>


    <ControlTemplate x:Key="LoginWindowTemplate" TargetType="{x:Type Window}">
        <Grid>
            <Border x:Name="bdr_LoginWin" Margin="10" BorderBrush="#FF97C5F7" BorderThickness="1">
                <Border.Effect>
                    <DropShadowEffect Color="Black" Direction="315" BlurRadius="10" ShadowDepth="5" Opacity="0.7" />
                </Border.Effect>
                <Grid>
                    <Image x:Name="img_LoginWin" Source="/TrboX;component/themes/resource/loginbk.jpg" Margin="0,0, 0, 0" Stretch="Fill"></Image>
                <DockPanel Margin="0">
                    
                    <!--<Border BorderBrush="Black" BorderThickness="1" Margin="0,0,0,1" DockPanel.Dock="Top" Height="30">
                        <Grid x:Name="grd_Header" Margin="0" Height="30" VerticalAlignment="Top">
                            <DockPanel LastChildFill="False" Margin="3,0,0,0" Height="30" HorizontalAlignment="Left">
                                <Image Source="{TemplateBinding Icon}" Height="20" Width="20" Margin="5,0,0,0"/>
                                <Label x:Name="lab_Title" Content="{TemplateBinding Title}" Margin="2,0,0,0" FontSize="16" HorizontalAlignment="Left" />
                                <Label x:Name="lab_SubTitle" Content="" Margin="5,0,0,0" FontSize="12" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
                            </DockPanel>
                            <Button x:Name="btn_Header"  Style="{StaticResource ButtonStyleHdr}"></Button>-->
                            
                            <DockPanel LastChildFill="False" Margin="0,5,5,0"  HorizontalAlignment="Right"  VerticalAlignment="Center" DockPanel.Dock="Top">

                                <Border Width="16" Height="16" ClipToBounds="True" DockPanel.Dock="Right"  VerticalAlignment="Top" Margin="0,0">
                                    <Image x:Name="img_SysClose" Source="/TrboX;component/themes/resource/sys-1.png" Margin="-106, -6, 0, 0" Stretch="None"></Image>
                                </Border>
                                <!--<Border Width="16" Height="16" ClipToBounds="True" DockPanel.Dock="Right"  VerticalAlignment="Top" Background="red" Margin="5,0">
                                    <Grid>
                                        <Image x:Name="img_SysRestore" Source="/TrboX;component/themes/resource/sys-2.jpg" Margin="-63, -4, 0, 0" Stretch="None"></Image>
                                        <Image x:Name="img_SysMax" Source="/TrboX;component/themes/resource/sys-1.jpg" Margin="-62, -6, 0, 0" Stretch="None"></Image>
                                    </Grid>
                                </Border>-->
                                <Border Width="16" Height="16" ClipToBounds="True" DockPanel.Dock="Right"  VerticalAlignment="Top" Margin="0,0,5,0">
                                    <Image x:Name="img_SysMin" Source="/TrboX;component/themes/resource/sys-1.png" Margin="-18, -6, 0, 0" Stretch="None"></Image>
                                </Border>
                            </DockPanel>


                        <!--</Grid>
                    </Border>-->
                    <AdornerDecorator DockPanel.Dock="Top">
                        <ContentPresenter />
                    </AdornerDecorator>

                </DockPanel>
                    </Grid>
            </Border>
        </Grid>
    </ControlTemplate>


    <Style x:Key="LoginWindowStyle" TargetType="Window">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="Template" Value="{StaticResource LoginWindowTemplate}" />
    </Style>


    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F3F3F3" Offset="0"/>
        <GradientStop Color="#EBEBEB" Offset="0.5"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#CDCDCD" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
    <Style x:Key="ButtonStyleNormal" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="Black" BorderThickness="1" Height="Auto" Width="Auto">
                        <Border x:Name="border1" BorderBrush="{x:Null}" BorderThickness="1" Height="Auto">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="#FFFFFF" />
                            <Setter Property="Background" TargetName="border" Value="Black"/>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
                            <Setter Property="BorderBrush" TargetName="border1" Value="#FFADADAD"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="#FFFFFF" />
                            <Setter Property="Background" TargetName="border" Value="{x:Null}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Black"/>
                            <Setter Property="Background" TargetName="border1" Value="Black"/>
                            <Setter Property="BorderBrush" TargetName="border1" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <LinearGradientBrush x:Key="TextBoxBorder" EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
        <GradientStop Color="#ABADB3" Offset="0.05"/>
        <GradientStop Color="#E2E3EA" Offset="0.07"/>
        <GradientStop Color="#E3E9EF" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="PasswordBoxStyleNormal" TargetType="{x:Type PasswordBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}"/>
        <Setter Property="FontFamily" Value="Times New Roman"/>
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid Height="Auto" Width="Auto">
                        <Border x:Name="border" BorderBrush="Black" BorderThickness="1">
                            <Themes:ListBoxChrome x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}" SnapsToDevicePixels="true" Margin="0">
                                <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Themes:ListBoxChrome>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="border" Value="{x:Null}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <local:SearchTxtConverter x:Key="SearchTxtConverter"/>
    <local:UserInputConverter x:Key="UserInputConverter"/>
    <local:UserPasswordConverter x:Key="UserPasswordConverter"/>
    <Style x:Key="TextBoxStyleSearch" BasedOn="{x:Null}" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="#FF48484A"  HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" Background="#FF272727" BorderThickness="1">
                        <Grid Margin="0">
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="1,1,-1,-1" VerticalContentAlignment="Center"/>
                            <Label Content="{Binding Text, Converter={StaticResource SearchTxtConverter}, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" VerticalAlignment="Stretch" Foreground="#FF747679" Margin="8,0,0,0" VerticalContentAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                        	<Setter Property="BorderBrush" TargetName="border" Value="#FF4779B1"/>
                        </Trigger>
                        <Trigger Property="TextBlock.TextWrapping" Value="NoWrap"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuStyleNormal" TargetType="{x:Type Menu}">
            <Setter Property="Background" Value="{DynamicResource LightBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Menu}">
                        <Grid>
                            <Border Margin="1" x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                            <StackPanel IsItemsHost="True" ClipToBounds="True" Orientation="Horizontal"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                <Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MenuItemStyleNormal" TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="1">
                            <Grid x:Name="grid">

                                <!-- Grid 用于结合 Icon、Content、Glyph 复选标记和 Arrow 的列，以显示下一个级别
							 Grid 中采用大小共享方式，以便将每个 MenuItem 的 Icon、Content 和 Arrow 一起对齐 -->
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition Width="14"/>
                                </Grid.ColumnDefinitions>

                                <!-- ContentPresenter 用来显示 Icon (如果需要) -->
                                <ContentPresenter Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                                <!-- Glyph 是一个复选标记(如果可选中的菜单需要) -->
                                <Grid Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                    <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                                </Grid>

                                <!-- 菜单文本等内容 -->
                                <ContentPresenter Grid.Column="1" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" Margin="6,0" VerticalAlignment="Center"/>

                                <!-- 箭头绘制的路径，该路径指向菜单的下一个级别 -->
                                <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                    <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                                </Grid>

                                <!-- Popup 是向下展开或横向展开(具体取决于该项所处的级别)的菜单的主体 -->
                                <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-3">
                                    <Grid x:Name="SubMenu" Background="{x:Null}">
                                        <Border x:Name="SubMenuBorder" Background="#FF4C4C4F" BorderBrush="#FF262626" BorderThickness="1" Margin="0,0,5,5">
                                        	<Border.Effect>
                                        		<DropShadowEffect Color="Black" Direction="315" BlurRadius="10" ShadowDepth="5" Opacity="0.7" />

											 </Border.Effect>                   
                                        </Border>

                                        <!-- StackPanel 保留菜单的子级。这是通过 IsItemsHost=True 来设置的 -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="0,0,5,5"/>
                                    </Grid>
                                </Popup>

                            </Grid>
                        </Border>

                        <!-- 这些触发器通过 Role 重新配置 MenuItem 的四种排列方式以显示不同级别的菜单 -->
                        <ControlTemplate.Triggers>

                            <Trigger Property="ButtonBase.Command" Value="{x:Null}"/>

                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
                                <Setter Property="BorderBrush" TargetName="Border" Value="Black"/>
                                <Setter Property="Background" TargetName="grid" Value="Black"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>

                            <!-- Role = TopLevelHeader: 这是菜单中的根菜单项；Popup 向下展开 -->
                            <Trigger Property="Role" Value="TopLevelHeader">
                                <Setter Property="Margin" Value="0,1,0,1"/>
                                <Setter Property="Padding" Value="6,3,6,3"/>
                                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                                <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded"/>

                            <!-- Role = TopLevelItem:  这是没有任何子项的顶级菜单的子菜单项-->
                            <Trigger Property="Role" Value="TopLevelItem">
                                <Setter Property="Margin" Value="0,1,0,1"/>
                                <Setter Property="Padding" Value="6,3,6,3"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>

                            <!-- Role = SubMenuHeader: 这是不包含子级的子菜单项 -->
                            <Trigger Property="Role" Value="SubmenuHeader">
                                <Setter Property="DockPanel.Dock" Value="Top"/>
                                <Setter Property="Padding" Value="0,2,0,2"/>
                                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                            </Trigger>

                            <!-- Role = SubMenuItem: 这是包含子级的子菜单项-->
                            <Trigger Property="Role" Value="SubmenuItem">
                                <Setter Property="DockPanel.Dock" Value="Top"/>
                                <Setter Property="Padding" Value="0,2,0,2"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                            </Trigger>

                            <!-- 如果不存在 Icon，我们会折叠 Icon Content -->
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            </Trigger>

                            <!-- GlyphPanel 包含 CheckMark -->
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            </Trigger>

                            <Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
                                <Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu"/>
                                <Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu"/>
                                <!--<Setter Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"/> -->
                            </Trigger>

                            <!-- 对 Menu Highlight 和 IsEnabled 使用系统颜色-->
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
                                <Setter Property="BorderBrush" TargetName="Border" Value="Black"/>
                                <Setter Property="Background" TargetName="grid" Value="Black"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <!--
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background" TargetName="Border" Value="Black"/>
								<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								<Setter Property="Background" TargetName="grid" Value="{x:Null}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
							</Trigger>
							-->
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyleIcon" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{x:Null}" BorderThickness="1" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto">
                            <ContentPresenter HorizontalAlignment="Stretch" Margin="0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="Black"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderThickness" TargetName="border" Value="1"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="Black"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                                <Setter Property="OpacityMask" TargetName="border" Value="#7F000000"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="SeparatorStyleNormal" TargetType="{x:Type Separator}">
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type Separator}">
        				<Grid Margin="0" SnapsToDevicePixels="true" UseLayoutRounding="False" VerticalAlignment="Center">
        					<Path Data="M6.8333333,30 L178.16667,30" Height="2" Margin="-1,0" Stretch="Fill" VerticalAlignment="Center" StrokeThickness="2">
        						<Path.Stroke>
        							<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
        								<GradientStop Color="#FF707074" Offset="0.75"/>
        								<GradientStop Color="#FF2B2B2B" Offset="0.15"/>
        								<GradientStop Color="#FF1D1D1D" Offset="0.3"/>
        								<GradientStop Color="#FF4C4C4F" Offset="0"/>
        								<GradientStop Color="#FF4C4C4F" Offset="1"/>
        							</LinearGradientBrush>
        						</Path.Stroke>
        					</Path>
        				</Grid>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="RadioButtonStyleNav" TargetType="{x:Type RadioButton}">
        	<Setter Property="SnapsToDevicePixels" Value="true"/>
        	<Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
        	<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type RadioButton}">
        				<Grid x:Name="grid" Margin="0" Height="24">
        					<Border x:Name="border1_Copy1" BorderBrush="#FF626262" BorderThickness="1" Background="#FF3B3B3D" CornerRadius="4"/>
        					<Border x:Name="border1_Copy2" BorderBrush="{x:Null}" BorderThickness="0" Background="#FF78ACE5" CornerRadius="4" Visibility="Collapsed"/>
        					<Border x:Name="border1" BorderBrush="{x:Null}" BorderThickness="0" Background="#3F000000" CornerRadius="4" Visibility="Collapsed"/>
        					<Border x:Name="border1_Copy" BorderBrush="{x:Null}" BorderThickness="0" Background="#3FFFFFFF" CornerRadius="4" Visibility="Collapsed"/>
        					<ContentPresenter Margin="10,1" RecognizesAccessKey="True" VerticalAlignment="Center" HorizontalAlignment="Center"/>
        				</Grid>
				
					<!-- BulletDecorator 用于提供 checkmark 与 Content 之间的基线对齐 -->
					
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsChecked" Value="true">
        						<Setter Property="Visibility" TargetName="border1_Copy2" Value="Visible"/>
        					</Trigger>
        					<Trigger Property="IsMouseOver" Value="true">
        						<Setter Property="Visibility" TargetName="border1_Copy" Value="Visible"/>
        					</Trigger>
        					<Trigger Property="IsPressed" Value="true">
        						<Setter Property="Visibility" TargetName="border1" Value="Visible"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Opacity" TargetName="grid" Value="0.5"/>
        					</Trigger>
						
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="RadioButtonMgr" TargetType="{x:Type RadioButton}">
        	<Setter Property="SnapsToDevicePixels" Value="true"/>
        	<Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
        	<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type RadioButton}">
        				<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" Background="#00000000" BorderThickness="{TemplateBinding BorderThickness}" >
        					<Border x:Name="border1" BorderBrush="{x:Null}" BorderThickness="0">
        						<TextBlock x:Name="textBlock" TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="#FFC9CDD2"/>
        					</Border>
        				</Border>
				
					<!-- BulletDecorator 用于提供 checkmark 与 Content 之间的基线对齐 -->
					
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsChecked" Value="true">
        						<Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
        						<Setter Property="Background" TargetName="border" Value="#FF545D6E"/>
        					</Trigger>
        					<MultiTrigger>
        						<MultiTrigger.Conditions>
        							<Condition Property="IsMouseOver" Value="True"/>
        							<Condition Property="IsChecked" Value="False"/>
        						</MultiTrigger.Conditions>
        						<Setter Property="Background" TargetName="border1" Value="#FF5695DB"/>
        						<Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
        					</MultiTrigger>
        					<Trigger Property="IsPressed" Value="true">
        						<Setter Property="Background" TargetName="border" Value="Black"/>
        						<Setter Property="Foreground" Value="#FFF"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Foreground" Value="#80000000"/>
        						<Setter Property="BorderBrush" TargetName="border" Value="#80000000"/>
        					</Trigger>
						
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <SolidColorBrush x:Key="TabControlNormalBorderBrush" Color="#8C8E94"/>
        <Style x:Key="TabControlStyleNormal" TargetType="{x:Type TabControl}">
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="Padding" Value="4,4,4,4"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}"/>
        	<Setter Property="Background" Value="#F9F9F9"/>
        	<Setter Property="HorizontalContentAlignment" Value="Center"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type TabControl}">
        				<Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
        					<Grid.ColumnDefinitions>
        						<ColumnDefinition x:Name="ColumnDefinition0"/>
        						<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
        					</Grid.ColumnDefinitions>
        					<Grid.RowDefinitions>
        						<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
        						<RowDefinition x:Name="RowDefinition1" Height="*"/>
        					</Grid.RowDefinitions>
        					<TabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" Height="20"/>
        					<Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
        						<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        					</Border>
        				</Grid>
        				<ControlTemplate.Triggers>
        					<Trigger Property="TabStripPlacement" Value="Bottom">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
        					</Trigger>
        					<Trigger Property="TabStripPlacement" Value="Left">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
        						<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
        						<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
        					</Trigger>
        					<Trigger Property="TabStripPlacement" Value="Right">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
        						<Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
        						<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <SolidColorBrush x:Key="CheckBoxFillNormal" Color="#F4F4F4"/>
        <SolidColorBrush x:Key="CheckBoxStroke" Color="#8E8F8F"/>
        <Style x:Key="EmptyCheckBoxFocusVisual">
        	<Setter Property="Control.Template">
        		<Setter.Value>
        			<ControlTemplate>
        				<Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="CheckRadioFocusVisual">
        	<Setter Property="Control.Template">
        		<Setter.Value>
        			<ControlTemplate>
        				<Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="CheckBoxStyleMsg" TargetType="{x:Type CheckBox}">
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
        	<Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type CheckBox}">
        				<Border x:Name="border" BorderBrush="{x:Null}" BorderThickness="0" Height="Auto" Width="Auto" Background="#0097C5F7">
        					<Border x:Name="border1" BorderBrush="{x:Null}" BorderThickness="1">
        						<ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,0,0,0"/>
        					</Border>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsChecked" Value="False"/>
        					<Trigger Property="IsChecked" Value="True">
        						<!--Setter Property="Background" TargetName="border" Value="#FF97C5F7"/-->
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        					</Trigger>
        					<Trigger Property="IsMouseOver" Value="True"/>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>


    <Style x:Key="ToggleButtonStyle1" d:IsControlPart="True" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Width="15" Height="13" Background="Transparent">
                        <Path Visibility="Collapsed" HorizontalAlignment="Center" Margin="0" x:Name="IsExpandedPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M 0 4 L 8 4 L 4 8 Z" Height="6" Stretch="Fill" Width="8"/>
                        <Path HorizontalAlignment="Center" Margin="0" x:Name="ExpandPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M 4 0 L 8 4 L 4 8 Z" Width="6" Stretch="Fill" Height="8"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="IsExpandedPath"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ExpandPath"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItemStyleRoot" d:IsControlPart="True" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid x:Name="grid" Background="{x:Null}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="32" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="32"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border  Grid.ColumnSpan="3" x:Name="Selection_Border" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" VerticalAlignment="Stretch" BorderThickness="0,1"/>
                        <Border x:Name="border" Grid.Column="1" BorderBrush="{x:Null}" BorderThickness="0" HorizontalAlignment="Stretch" Height="Auto" Grid.RowSpan="1" VerticalAlignment="Stretch" Width="Auto" Margin="0" Background="{x:Null}">
                            <TextBlock x:Name="textBlock" TextWrapping="Wrap" Text="{TemplateBinding Header}" Foreground="#FFBEC3C7" FontSize="13" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource ToggleButtonStyle1}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" VerticalAlignment="Center" Foreground="#FFBEC3C7" HorizontalAlignment="Right" Height="Auto" Margin="0,0,3.5,0"/>
                        <ItemsPresenter Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" x:Name="ItemsHost"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Selection_Border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Expander">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="Expander"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#FF545D6E"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#FF0C0C0D"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="Selection_Border" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <local:IconFormOrgConverter x:Key="IconFromOrg" />
    <local:IconOpFormOrgConverter x:Key="IconOpFromOrg" />
    <local:IconEnableFormOrgConverter x:Key="IconEnableFromOrg" />

    <Style x:Key="TreeViewItemStyle2nd" d:IsControlPart="True" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid x:Name="grid" Background="{x:Null}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="48" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="32"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border  Grid.ColumnSpan="3" x:Name="Selection_Border" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" VerticalAlignment="Stretch" BorderThickness="0,1"/>
                        <Border x:Name="border" Grid.Column="1" BorderBrush="{x:Null}" BorderThickness="0" HorizontalAlignment="Stretch" Height="Auto" Grid.RowSpan="1" VerticalAlignment="Stretch" Width="Auto" Margin="0" Background="{x:Null}">
                            <DockPanel HorizontalAlignment="Stretch" LastChildFill="False" Width="Auto">
                                <Image Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="18" MaxHeight="18" HorizontalAlignment="Left"  Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconFromOrg}}" Margin="0,0,5,0"/>
                                <TextBlock x:Name="textBlock" TextWrapping="Wrap" Text="{TemplateBinding Header}" Foreground="#FFBEC3C7" FontSize="13" Margin="0,7.745" VerticalAlignment="Center" Width="Auto"/>
                            </DockPanel>
                        </Border>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource ToggleButtonStyle1}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" VerticalAlignment="Center" Foreground="#FFBEC3C7" HorizontalAlignment="Right" Height="Auto" Margin="0,0,3.5,0"/>
                        <ItemsPresenter Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" x:Name="ItemsHost"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Selection_Border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Expander">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="Expander"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#FF545D6E"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#FF0C0C0D"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="Selection_Border" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemStyle3rd" d:IsControlPart="True" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid x:Name="grid" Background="{x:Null}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="64" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="32"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border  Grid.ColumnSpan="3" x:Name="Selection_Border" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" VerticalAlignment="Stretch" BorderThickness="0,1"/>
                        <Border x:Name="border" Grid.Column="1" BorderBrush="{x:Null}" BorderThickness="0" HorizontalAlignment="Stretch" Height="Auto" Grid.RowSpan="1" VerticalAlignment="Stretch" Width="Auto" Margin="0" Background="{x:Null}">
                            <DockPanel HorizontalAlignment="Stretch" LastChildFill="False" Width="Auto">
                                <Image Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="18" MaxHeight="18" HorizontalAlignment="Left"  Source="{Binding Tag, Converter={StaticResource IconFromOrg}, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,5,0" Opacity="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconOpFromOrg}}"/>
                                <TextBlock x:Name="textBlock" TextWrapping="Wrap" Text="{TemplateBinding Header}" Foreground="#FFBEC3C7" FontSize="13" Margin="0,7.745" VerticalAlignment="Center" Width="Auto" Opacity="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconOpFromOrg}}"/>
                            </DockPanel>
                        </Border>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource ToggleButtonStyle1}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" VerticalAlignment="Center" Foreground="#FFBEC3C7" HorizontalAlignment="Right" Height="Auto" Margin="0,0,3.5,0"/>
                        <ItemsPresenter Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" x:Name="ItemsHost"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Selection_Border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Expander">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="Expander"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#FF545D6E"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#FF0C0C0D"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="Selection_Border" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarStyleNormal" TargetType="{x:Type ScrollBar}">
    	<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ScrollBar}">
    				<Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
    					<Grid.RowDefinitions>
    						<RowDefinition MaxHeight="5"/>
    						<RowDefinition Height="0.00001*"/>
    						<RowDefinition MaxHeight="5"/>
    					</Grid.RowDefinitions>

    					<RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand" Visibility="Hidden">
    						<Grid>
    							<Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
    						</Grid>
    					</RepeatButton>

                        <!-- Track 是一种特殊的布局容器，可调整用于在其一侧执行跳转滚动的 thumb 和 repeat button 的大小 -->
    					<Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
    						<Track.Thumb>
    							<Thumb Style="{DynamicResource ThumbStyleNormal}"/>
    						</Track.Thumb>
    						<Track.IncreaseRepeatButton>
    							<RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
    						</Track.IncreaseRepeatButton>
    						<Track.DecreaseRepeatButton>
    							<RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
    						</Track.DecreaseRepeatButton>
    					</Track>

    					<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand" Visibility="Hidden">
    						<Grid>
    							<Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
    						</Grid>
    					</RepeatButton>
    				</Grid>

                    <!-- 它对 ScrollBar 使用一个模板，并将其旋转为“水平”
					它还会更改命令，使其执行“向左”和“向右”命令，而不是执行“向上”和“向下”命令 -->
    				<ControlTemplate.Triggers>
    					<Trigger Property="Orientation" Value="Horizontal">

                            <!-- 将 ScrollBar 从“垂直”旋转为“水平” -->
    						<Setter Property="LayoutTransform" TargetName="GridRoot">
    							<Setter.Value>
    								<RotateTransform Angle="-90"/>
    							</Setter.Value>
    						</Setter>

                            <!-- Track 在内部绑定到“方向”，因此我们需要将其旋转回“垂直” -->
    						<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

                            <!-- 更改命令，以执行“水平”命令 -->
    						<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
    						<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
    						<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
    						<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="ThumbStyleNormal" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Thumb}">
    				<Grid Margin="0,0,0,0" x:Name="Grid">
    					<Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="4" Height="Auto" RadiusX="2" RadiusY="2" Fill="#FF535353" StrokeThickness="0"/>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsFocused" Value="True"/>
    					<Trigger Property="IsMouseOver" Value="True"/>
    					<Trigger Property="IsEnabled" Value="False"/>
    					<Trigger Property="IsDragging" Value="True"/>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="ScrollViewerStyleNormal" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ScrollViewer}">
    				<Grid >
    					<Grid.ColumnDefinitions>
    						<ColumnDefinition Width="*"/>
    						<ColumnDefinition Width="Auto"/>
    					</Grid.ColumnDefinitions>
    					<Grid.RowDefinitions>
    						<RowDefinition Height="*"/>
    						<RowDefinition Height="Auto"/>
    					</Grid.RowDefinitions>
    					<ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

                        <!-- ScrollBars 的可见性通过控件的实现来控制 -->
    					<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource ScrollBarStyleNormal}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" Background="{x:Null}" BorderThickness="0" Height="18" />
    					<ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource ScrollBarStyleNormal}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" Background="{x:Null}" BorderThickness="0" Width="18" />
    				</Grid>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>

    <!--<Style x:Key="TreeViewItemRoot" d:IsControlPart="True" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid x:Name="grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="24"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border x:Name="border" BorderBrush="Black" BorderThickness="0" Grid.ColumnSpan="3" HorizontalAlignment="Stretch" Height="Auto" Grid.RowSpan="1" VerticalAlignment="Stretch" Width="Auto" Margin="0" Background="{x:Null}"/>
                    	<ToggleButton x:Name="Expander" Style="{DynamicResource SimpleTreeViewItemToggleButton}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" VerticalAlignment="Stretch"/>
                    	<Border Grid.Column="1" x:Name="Selection_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" VerticalAlignment="Center">
                    		<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="PART_Header" ContentSource="Header"/>
                    	</Border>
                    	<ItemsPresenter Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" x:Name="ItemsHost"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost"/>
                            <Setter Property="Background" TargetName="border" Value="{x:Null}"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="Expander"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FF97C5F7"/>
                            <Setter Property="Background" TargetName="Selection_Border" Value="{x:Null}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="grid" Value="#FFFFFF00"/>
                            <Setter Property="Background" TargetName="border" Value="#FFFFFF00"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="border" Value="#FFF3F3F3"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                        	<Setter Property="Background" TargetName="border" Value="#FF97C5F7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
		<Style x:Key="TreeViewStyleNav" TargetType="{x:Type TreeView}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TreeView}">
						<Grid Background="{x:Null}">
							<Border x:Name="Border" BorderThickness="0" CornerRadius="1">
								<ScrollViewer Style="{DynamicResource ScrollViewerStyleNormal}" Focusable="False" Padding="0" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" CanContentScroll="False">
									<ItemsPresenter/>
								</ScrollViewer>
							</Border>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<!--<Style x:Key="ScrollViewerNormal" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ScrollViewer}">
						<Grid Background="{TemplateBinding Background}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="*"/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<ScrollContentPresenter Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
						
						--><!-- ScrollBars 的可见性通过控件的实现来控制 --><!--
							<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource ScrollBarStyleNormal}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
							<ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>-->


    <!--<Style x:Key="TreeViewItemStyleGroup" d:IsControlPart="True" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>       
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid x:Name="grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="24"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border x:Name="border" BorderBrush="Black" BorderThickness="0" Grid.ColumnSpan="3" HorizontalAlignment="Stretch" Height="Auto" Grid.RowSpan="1" VerticalAlignment="Stretch" Width="Auto" Margin="0" Background="#FF97C5F7"/>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource SimpleTreeViewItemToggleButton}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" VerticalAlignment="Stretch" Margin="20,0,0,0"/>
                        <Border Grid.Column="1" x:Name="Selection_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" VerticalAlignment="Center" Margin="25,0,0,0">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="PART_Header" ContentSource="Header"/>
                        </Border>
                        <ItemsPresenter Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" x:Name="ItemsHost"/>
                        <Grid Margin="5,0,0,0" Grid.Column="1" Width="18" Height="18" HorizontalAlignment="Left">
                            <Border BorderBrush="Black" BorderThickness="0" Opacity="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconOpFromOrg}}">
                                <Ellipse Fill="#FF95C4F8"  Stroke="Black" StrokeThickness="0"/>
                            </Border>
                            <Border Margin="2.61">
                                <Image  Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconFromOrg}}" />
                            </Border>
                        </Grid>
                        --><!-- Image Margin="5,0,0,0" Grid.Column="1" Width="16" Height="16" HorizontalAlignment="Left" Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconFromOrg}}"/--><!--
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost"/>
                            <Setter Property="Background" TargetName="border" Value="{x:Null}"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="Expander"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FFFFFF00"/>
                            <Setter Property="Background" TargetName="Selection_Border" Value="{x:Null}"/>
                        </Trigger>
                        --><!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="grid" Value="#FFFFFF00"/>
                            <Setter Property="Background" TargetName="border" Value="#FFFFFF00"/>
                        </MultiTrigger>--><!--
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="border" Value="#FFF3F3F3"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FF97C5F7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItemStyleMember" d:IsControlPart="True" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="IsEnabled" Value="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconEnableFromOrg}}"/>
        <Setter Property="ToolTip" Value="{Binding Tag.InformationWithoutGroup, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid x:Name="grid" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="24"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border x:Name="border"  BorderBrush="Black" BorderThickness="0" Grid.ColumnSpan="3" HorizontalAlignment="Stretch" Height="Auto" Grid.RowSpan="1" VerticalAlignment="Stretch" Width="Auto" Margin="0" Background="#FF97C5F7"/>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource SimpleTreeViewItemToggleButton}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" VerticalAlignment="Stretch" Margin="40,0,0,0"/>
                        <Border Grid.Column="1" x:Name="Selection_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" VerticalAlignment="Center" Margin="25,0,0,0">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="PART_Header" ContentSource="Header"  Opacity="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconOpFromOrg}}"/>
                        </Border>
                        <ItemsPresenter Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" x:Name="ItemsHost"/>    
						<Grid Margin="5,0,0,0" Grid.Column="1" Width="18" Height="18" HorizontalAlignment="Left">
                            <Border BorderBrush="Black" BorderThickness="0" Opacity="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconOpFromOrg}}">
                                <Ellipse Fill="#FF95C4F8"  Stroke="Black" StrokeThickness="0"/>
                                                		</Border>
                                                		<Border Margin="2.61">
                                <Image  Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconFromOrg}}" />
                            </Border>
                                                	</Grid>                
                        --><!--Image Margin="5,0,0,0" Grid.Column="1" Width="16" Height="16" HorizontalAlignment="Left" Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconFromOrg}}" Opacity="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IconOpFromOrg}}"/ --><!--                       
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost"/>
                            <Setter Property="Background" TargetName="border" Value="{x:Null}"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="Expander"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FFFFFF00"/>
                            <Setter Property="Background" TargetName="Selection_Border" Value="{x:Null}"/>
                        </Trigger>
                        --><!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="grid" Value="#FFFFFF00"/>
                            <Setter Property="Background" TargetName="border" Value="#FFFFFF00"/>
                        </MultiTrigger>--><!--
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="border" Value="#FFF3F3F3"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FF97C5F7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
   
    <DataTemplate x:Key="ButtonIconTemplate">
        <DockPanel Height="Auto" LastChildFill="False">
            <Border Width="{Binding Range.Width}" Height="{Binding Range.Height}" ClipToBounds="True" Margin="0">
                <Image Source="{Binding Path = Icon}" Margin="{Binding Thick}" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            </Border>
            <TextBlock DockPanel.Dock="Left" Text="{Binding Content}" Height="Auto"  Margin="5,0,0,0"  VerticalAlignment="Center"/>
        </DockPanel>
    </DataTemplate>


    <Style x:Key="TextBoxStyleNormal" BasedOn="{x:Null}" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border BorderBrush="#FF505053" BorderThickness="1" HorizontalAlignment="Stretch" Width="Auto" Background="#FF3B3B3D">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="5,2.5" Padding="0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxStyleNormal" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!-- ToggleButton 已数据绑定到 ComboBox 本身以切换 IsDropDownOpen -->
                        <ToggleButton Grid.Column="2" Template="{DynamicResource ToggleButtonControlTemplateNormal}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Style="{DynamicResource ToggleButtonStyle1}"/>
                        <ContentPresenter HorizontalAlignment="Left" Margin="13,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

                        <!-- 必须将 TextBox 命名为 PART_EditableTextBox，否则 ComboBox 将无法识别它 -->
                        <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>

                        <!-- Popup 可显示 ComboBox 中的项列表。IsOpen 已数据绑定到通过 ComboBoxToggleButton 来切换的 IsDropDownOpen -->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" VerticalOffset="1">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="#F94C4C4F" BorderBrush="#FF505053" BorderThickness="1"/>
                                <ScrollViewer Margin="0,8" Style="{DynamicResource SimpleScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">

                                    <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>

                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- 这会强制 DropDown 的大小有最小限制(如果它为空) -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ToggleButtonControlTemplateNormal" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="20"/>
            </Grid.ColumnDefinitions>
            <Rectangle Fill="#FF3B3B3D" HorizontalAlignment="Stretch" Height="Auto" RadiusY="0" RadiusX="0" Stroke="#FF505053" VerticalAlignment="Stretch" Width="Auto" Grid.ColumnSpan="2"/>
            <Image x:Name="image" HorizontalAlignment="Center" Height="12" VerticalAlignment="Center" Width="12" Grid.Column="1" Source="/TrboX;component/resource/images/chk_drop_ 12_12_n.png"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Source" TargetName="image" Value="/TrboX;component/resource/images/chk_drop_12_12_h.png"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ComboBoxItemStyleNormal" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Margin="13,0,0,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="Bd" Value="#11D3D3FF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxStyleNormal" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <!-- BulletDecorator 用于提供 checkmark 与 Content 之间的基线对齐 -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="14" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Image x:Name="image" HorizontalAlignment="Left" Height="14" VerticalAlignment="Top" Width="14" Source="/TrboX;component/resource/images/unchecked_14_14.png" Opacity="1"/>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" Opacity="1"/>
                    </BulletDecorator>

                    <!-- 它使用 Visibility 来基于 IsChecked 隐藏和显示 CheckMark -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Source" TargetName="image" Value="/TrboX;component/resource/images/checked_14_14.png"/>
                        </Trigger>
                        <MultiTrigger>
                        	<MultiTrigger.Conditions>
                        		<Condition Property="IsEnabled" Value="False"/>
                        		<Condition Property="IsChecked" Value="False"/>
                        	</MultiTrigger.Conditions>
                        	<Setter Property="Source" TargetName="image" Value="/TrboX;component/resource/images/unchecked_dis_14_14.png"/>
							<Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"/>
                        </MultiTrigger>
                        <MultiTrigger>
                        	<MultiTrigger.Conditions>
                        		<Condition Property="IsEnabled" Value="False"/>
                        		<Condition Property="IsChecked" Value="True"/>
                        	</MultiTrigger.Conditions>
                        	<Setter Property="Opacity" TargetName="image" Value="0.5"/>
                        	<Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContextMenuStyleNormal" TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid>
                    <Border x:Name="Border" Background="#FF4C4C4F" BorderBrush="#FF262626" Margin="5" BorderThickness="1">
                        <Border.Effect>
                            <DropShadowEffect Opacity="0.5"/>
                        </Border.Effect>
                      
                        <ItemsPresenter Margin="0,8"/>
                    </Border>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxStylePTT" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="border" Background="#FFE69247" BorderThickness="0" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" >
                        <TextBlock  x:Name="txt" TextWrapping="Wrap" Text="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" FontSize="14" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFFF8B23"/>
                        </Trigger>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Text" TargetName="txt" Value="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonStyleFastSend" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="Black" BorderThickness="0" HorizontalAlignment="Stretch" Height="32" VerticalAlignment="Top" Width="Auto" Background="#FF78ACE5">
                        <TextBlock TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White" FontSize="14"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FF70B4FF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckBoxStyleSend" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="border" Background="#FF78ACE5" BorderThickness="0" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" >
                        <TextBlock x:Name="txt"  TextWrapping="Wrap" Text="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" FontSize="14" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Text" TargetName="txt" Value="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FF70B4FF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonStyleUnSend" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- 我们将 Grid 用作根，原因在于这便于添加更多的元素来自定义按钮 -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Padding="{TemplateBinding Padding}" BorderThickness="0" Background="#FF4C4C4F" CornerRadius="0" BorderBrush="#FF5C5C5D"/>
                        <TextBlock x:Name="textBlock" HorizontalAlignment="Center" TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" FontFamily="Hiragino Sans GB W3" Foreground="#FFCFCFCF" FontSize="14"/>

                        <!-- Content Presenter 是控件放置文本内容等项之处 -->
                        <!-- 通过利用绑定，无需编辑模板即可将控件参数化 -->
                    </Grid>

                    <!--每种状态都基于模板中的 Border 来设置画笔 -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="#FF545D6E"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="#FF545D6E"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="Grid" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonNormalStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- 我们将 Grid 用作根，原因在于这便于添加更多的元素来自定义按钮 -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Tag, ElementName=textBlock}" BorderBrush="{TemplateBinding BorderBrush}" ClipToBounds="True" />
                        <Border x:Name="border1" BorderBrush="Black" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" Background="#3F000000" CornerRadius="{Binding CornerRadius, ElementName=Border}" Visibility="Collapsed"/>
                        <Border x:Name="border" BorderBrush="Black" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" Background="#3FFFFFFF" CornerRadius="{Binding CornerRadius, ElementName=Border}" Visibility="Collapsed"/>
                        <TextBlock x:Name="textBlock" HorizontalAlignment="Center" TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" FontFamily="{TemplateBinding FontFamily}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" Tag="{TemplateBinding Tag}" />

                        <!-- Content Presenter 是控件放置文本内容等项之处 -->
                        <!-- 通过利用绑定，无需编辑模板即可将控件参数化 -->
                    </Grid>

                    <!--每种状态都基于模板中的 Border 来设置画笔 -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Visibility" TargetName="border" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Visibility" TargetName="border1" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="Grid" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxStyle1" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid Background="#FFBD9C9C" Margin="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="18 "/>
                        </Grid.ColumnDefinitions>
                        <!-- ToggleButton 已数据绑定到 ComboBox 本身以切换 IsDropDownOpen -->
                        <ToggleButton Grid.Column="0" Template="{DynamicResource ToggleButtonControlTemplate1}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Background="{x:Null}" BorderBrush="{x:Null}" Grid.ColumnSpan="2"/>
                        <DockPanel HorizontalAlignment="Stretch" Height="Auto" LastChildFill="True" VerticalAlignment="Stretch" Width="Auto" Margin="5,0,0,0" d:IsHidden="True">
                            <local:IconBtn x:Name="btn_Icon" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{x:Null}" Height="22" Width="22" Margin="0,0,5,0" 
                    				Hover="{Binding Hover, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ListBtn}}}"
                    				Normal="{Binding Normal, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ListBtn}}}"
                    				Press="{Binding Presse, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ListBtn}}}"
                    				Disable="{Binding Disable, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ListBtn}}}" Foreground="{x:Null}"/>
                            <Button x:Name="btn_Content"  Content="{Binding Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ListBtn}}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Margin="0,0,5,0" Style="{DynamicResource ButtonStyle1}" BorderThickness="0" 
                    				Foreground="{TemplateBinding Foreground}" 
                    				FontFamily="{TemplateBinding FontFamily}"
                    				FontSize="{TemplateBinding FontSize}" Background="{x:Null}" BorderBrush="{x:Null}"                                       
                                        />
                        </DockPanel>
                        <ContentPresenter HorizontalAlignment="Left" Margin="3,150,0,150" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" Visibility="Collapsed" Height="0" Width="0" d:IsHidden="True"/>

                        <!-- 必须将 TextBox 命名为 PART_EditableTextBox，否则 ComboBox 将无法识别它 -->
                        <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,142,0,142" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}" Height="16" Width="4" d:IsHidden="True"/>

                        <!-- Popup 可显示 ComboBox 中的项列表。IsOpen 已数据绑定到通过 ComboBoxToggleButton 来切换的 IsDropDownOpen -->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" Grid.ColumnSpan="2" VerticalOffset="{Binding VOffset, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ListBtn}}}" d:IsHidden="True">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True" Background="{x:Null}">
                                <Grid HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" Margin="5,0,0,0">
                                    <Border x:Name="DropDownBorder" Background="#FF4C4C4F" BorderBrush="#FF262626" BorderThickness="1" Margin="0,0,5,5">
                                        <Border.Effect>
                                            <DropShadowEffect Color="#FF262626" Direction="315" BlurRadius="5" ShadowDepth="3" Opacity="0.5" />
                                        </Border.Effect>
                                    </Border>
                                    <ScrollViewer Margin="1,8,6,13" Style="{DynamicResource SimpleScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">

                                        <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>

                                    </ScrollViewer>
                                </Grid>
                            </Grid>
                        </Popup>
                        <Label x:Name="CornerRadius" Content="{Binding Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ListBtn}}}" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- 这会强制 DropDown 的大小有最小限制(如果它为空) -->
                        <Trigger Property="HasItems" Value="false"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListViewStyleNormal" TargetType="{x:Type ListView}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Grid>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ScrollViewer Margin="0" Style="{DynamicResource ScrollViewerStyleNormal}" Focusable="false" Background="{TemplateBinding Background}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">

                            <!-- StackPanel 用来显示子级，方法是将 IsItemsHost 设置为 True -->
                            <!--<StackPanel Margin="2" IsItemsHost="true"/>-->
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>