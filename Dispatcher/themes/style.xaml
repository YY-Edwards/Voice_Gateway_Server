<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" 
                    xmlns:Windows="clr-namespace:Sigmar.Windows;assembly=Sigmar"
                    xmlns:Controls="clr-namespace:Sigmar.Controls;assembly=Sigmar"
                    xmlns:ctrl="clr-namespace:Dispatcher.Controls"
                    xmlns:svr="clr-namespace:Dispatcher.Service">

    <!--windows style-->
    <ControlTemplate x:Key="WindowTemplateKey" TargetType="{x:Type Window}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
            <Grid>
                <AdornerDecorator>
                    <ContentPresenter/>
                </AdornerDecorator>
                <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="WindowState" Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="TrboxWindowStylex" TargetType="{x:Type Window}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid>
                        <Border x:Name="bdr_win" BorderBrush="#FF1D1D1F" Margin="10"  Background="#FF1D1D1F">
                            <Border.Effect>
                                <DropShadowEffect Color="Black" Direction="315" BlurRadius="10" ShadowDepth="5" Opacity="0.7" />
                            </Border.Effect>
                            <Grid>
                                <DockPanel Margin="0">
                                    <AdornerDecorator>
                                        <ContentPresenter />
                                    </AdornerDecorator>
                                </DockPanel>
                            </Grid>

                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                <Setter Property="Template" Value="{StaticResource WindowTemplateKey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TrboxWindowStyle" TargetType="{x:Type Windows:BaseWindow}">
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Windows:BaseWindow}">
                    <Grid>
                        <Border x:Name="bdr_win" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Margin="{TemplateBinding ShadowMargin}" Padding="{TemplateBinding Padding}">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="10" Color="Black" Direction="315" Opacity="0.7" ShadowDepth="5"/>
                            </Border.Effect>
                            <Grid>
                                <DockPanel Margin="0">
                                    <AdornerDecorator>
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                    </AdornerDecorator>
                                </DockPanel>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <!-- Menu-->
    <Style x:Key="MenuStyleNormal" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border Margin="1" x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <StackPanel IsItemsHost="True" ClipToBounds="True" Orientation="Horizontal"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                            <Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuItemStyleTilte" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" Padding="1" Background="{x:Null}" CornerRadius="4" BorderBrush="{x:Null}">
                        <Grid x:Name="grid">

                            <!-- Grid 用于结合 Icon、Content、Glyph 复选标记和 Arrow 的列，以显示下一个级别
							 Grid 中采用大小共享方式，以便将每个 MenuItem 的 Icon、Content 和 Arrow 一起对齐 -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="4" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="4"/>
                            </Grid.ColumnDefinitions>

                            <!-- ContentPresenter 用来显示 Icon (如果需要) -->

                            <!-- ContentPresenter 用来显示 Icon (如果需要) -->
                            <ContentPresenter Margin="4,12,6,12" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon" Visibility="Collapsed" Height="0"/>

                            <!-- Glyph 是一个复选标记(如果可选中的菜单需要) -->
                            <Grid Visibility="Collapsed" Margin="4,8.3,6,8.3" x:Name="GlyphPanel" VerticalAlignment="Center" Height="7.4">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                            </Grid>

                            <!-- 菜单文本等内容 -->
                            <ContentPresenter Grid.Column="1" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" Margin="10,1.5" VerticalAlignment="Center" Height="21"/>

                            <!-- 箭头绘制的路径，该路径指向菜单的下一个级别 -->
                            <Grid Grid.Column="3" Margin="4,8,1,8" x:Name="ArrowPanel" VerticalAlignment="Center" Height="8">
                                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>

                            <!-- Popup 是向下展开或横向展开(具体取决于该项所处的级别)的菜单的主体 -->
                            <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="9" HorizontalOffset="-2">
                                <Grid x:Name="SubMenu" Background="{x:Null}" Margin="0">
                                    <Border x:Name="SubMenuBorder" Background="#FF4C4C4F" BorderBrush="#FF262626" BorderThickness="1" Margin="0,0,5,5" FlowDirection="RightToLeft">
                                        <Border.Effect>
                                            <DropShadowEffect Color="#FF262626" Direction="225" BlurRadius="5" ShadowDepth="3" Opacity="0.5" />
                                        </Border.Effect>
                                    </Border>

                                    <!-- StackPanel 保留菜单的子级。这是通过 IsItemsHost=True 来设置的 -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="0,8,5,13"/>
                                </Grid>
                            </Popup>

                        </Grid>
                    </Border>

                    <!-- 这些触发器通过 Role 重新配置 MenuItem 的四种排列方式以显示不同级别的菜单 -->
                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSuspendingPopupAnimation" Value="False"/>
                                <Condition Property="IsHighlighted" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Border" Value="#FF454547"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="#FF222324"/>
                            <Setter Property="BitmapEffect" TargetName="Border">
                                <Setter.Value>
                                    <DropShadowBitmapEffect Color="#FFBDBDBD" Direction="270" Softness="0" ShadowDepth="1" Opacity="0.3"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <!-- 如果不存在 Icon，我们会折叠 Icon Content -->
                        <!-- 对 Menu Highlight 和 IsEnabled 使用系统颜色-->
                        <!-- Role = TopLevelHeader: 这是菜单中的根菜单项；Popup 向下展开 -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            <Setter Property="Margin" TargetName="SubMenu" Value="0,12,0,0"/>
                        </Trigger>

                        <!-- Role = TopLevelItem:  这是没有任何子项的顶级菜单的子菜单项-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            <Setter Property="HorizontalOffset" TargetName="SubMenuPopup" Value="-2"/>
                            <Setter Property="VerticalOffset" TargetName="SubMenuPopup" Value="9"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader: 这是不包含子级的子菜单项 -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSuspendingPopupAnimation" Value="True"/>
                                <Condition Property="IsHighlighted" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                            <Setter Property="Background" TargetName="Border" Value="#FF29292B"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="#FF222324"/>
                            <Setter Property="BitmapEffect" TargetName="Border">
                                <Setter.Value>
                                    <DropShadowBitmapEffect Color="#FFBDBDBD" Direction="270" Softness="0" ShadowDepth="1" Opacity="0.3"/>
                                </Setter.Value>
                            </Setter>

                        </MultiTrigger>

                        <!-- GlyphPanel 包含 CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!--
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background" TargetName="Border" Value="Black"/>
								<Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
								<Setter Property="Background" TargetName="grid" Value="{x:Null}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
							</Trigger>
							-->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

   

    <Style x:Key="MenuItemStyleSub" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="7,2,8,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="7,2,8,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="2,3,2,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="2,3,2,3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SeparatorStyleNormal" TargetType="{x:Type Separator}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid Margin="0" SnapsToDevicePixels="true" UseLayoutRounding="False" VerticalAlignment="Center">
                        <Path Data="M6.8333333,30 L178.16667,30" Height="2" Margin="-1,0" Stretch="Fill" VerticalAlignment="Center" StrokeThickness="2">
                            <Path.Stroke>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF707074" Offset="0.75"/>
                                    <GradientStop Color="#FF2B2B2B" Offset="0.15"/>
                                    <GradientStop Color="#FF1D1D1D" Offset="0.3"/>
                                    <GradientStop Color="#FF4C4C4F" Offset="0"/>
                                    <GradientStop Color="#FF4C4C4F" Offset="1"/>
                                </LinearGradientBrush>
                            </Path.Stroke>
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuItemStyle1" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="7,2,8,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="7,2,8,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="2,3,2,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="2,3,2,3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ContextMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Microsoft YaHei UI" />
        <Setter Property="Foreground" Value="White" />
         <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="7,2,8,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="7,2,8,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="2,3,2,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="2,3,2,3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <LinearGradientBrush x:Key="MenuItemSelectionFill" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#34C5EBFF" Offset="0"/>
        <GradientStop Color="#3481D8FF" Offset="1"/>
    </LinearGradientBrush>
    <Geometry x:Key="Checkmark">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Grid x:Name="grid" SnapsToDevicePixels="true" Background="#00000000">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="37"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                <Border x:Name="GlyphPanel" BorderBrush="#CDD3E6" BorderThickness="1" Background="#E6EFF4" CornerRadius="3" Height="22" Margin="1" Visibility="Hidden" Width="22" VerticalAlignment="Center">
                    <Image x:Name="image"/>
                </Border>
                <ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                <TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" FontSize="13"/>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="grid" Value="#FF5695DB"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                <Setter Property="Background" TargetName="GlyphPanel" Value="{x:Null}"/>
                <Setter Property="BorderBrush" TargetName="GlyphPanel" Value="{x:Null}"/>
                <Setter Property="Height" TargetName="image" Value="16"/>
                <Setter Property="Width" TargetName="image" Value="16"/>
                <Setter Property="Source" TargetName="image" Value="/TrboX;component/resource/images/menu_chk_16_16_n.png"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true"/>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="#FF9A9A9A"/>
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Background" TargetName="GlyphPanel" Value="{x:Null}"/>
                <Setter Property="BorderBrush" TargetName="GlyphPanel" Value="{x:Null}"/>
                <Setter Property="Source" TargetName="image" Value="/TrboX;component/resource/images/menu_chk_16_16_d .png"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False"/>
                    <Condition Property="IsChecked" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="#FF9A9A9A"/>
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Hidden"/>
                <Setter Property="Background" TargetName="GlyphPanel" Value="{x:Null}"/>
                <Setter Property="BorderBrush" TargetName="GlyphPanel" Value="{x:Null}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <LinearGradientBrush x:Key="MenuItemPressedFill" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#28717070" Offset="0"/>
        <GradientStop Color="#50717070" Offset="0.75"/>
        <GradientStop Color="#90717070" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="SubMenuBackgroundBrush" Color="#FFF5F5F5"/>
    <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    <Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Hover"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <DockPanel Background="Transparent" SnapsToDevicePixels="true">
                        <Rectangle x:Name="R1" DockPanel.Dock="Right" Fill="Transparent" Width="1"/>
                        <Rectangle x:Name="B1" DockPanel.Dock="Bottom" Fill="Transparent" Height="1"/>
                        <Rectangle x:Name="L1" DockPanel.Dock="Left" Fill="Transparent" Width="1"/>
                        <Rectangle x:Name="T1" DockPanel.Dock="Top" Fill="Transparent" Height="1"/>
                        <ContentPresenter x:Name="ContentContainer" HorizontalAlignment="Center" Margin="2,2,2,2" VerticalAlignment="Center"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="R1" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                            <Setter Property="Fill" TargetName="B1" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                            <Setter Property="Fill" TargetName="L1" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter Property="Fill" TargetName="T1" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter Property="Margin" TargetName="ContentContainer" Value="3,3,1,1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
    <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Column="0" Grid.Row="1">
                            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineUpCommand}" Focusable="false" Grid.Row="0" Style="{StaticResource MenuScrollButton}">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="0" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{StaticResource UpArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
                        </RepeatButton>
                        <RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineDownCommand}" Focusable="false" Grid.Row="2" Style="{StaticResource MenuScrollButton}">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="100" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{StaticResource DownArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="OuterBorder" RadiusY="2" RadiusX="2"/>
            <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="1" RadiusY="1" RadiusX="1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
            <Rectangle x:Name="InnerBorder" Margin="2"/>
            <DockPanel>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                <Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"/>
                <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </DockPanel>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="1" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="-1">
                <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                    <Border x:Name="SubMenuBorder" BorderBrush="#FF959595" BorderThickness="1" Background="{StaticResource SubMenuBackgroundBrush}">
                        <ScrollViewer x:Name="SubMenuScrollViewer" Margin="1,0" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" Fill="{StaticResource SubMenuBackgroundBrush}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <Rectangle Fill="#F1F1F1" HorizontalAlignment="Left" Margin="1,2" RadiusY="2" RadiusX="2" Width="28"/>
                                <Rectangle Fill="#E2E3E3" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                <Rectangle Fill="White" HorizontalAlignment="Left" Margin="30,2,0,2" Width="1"/>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Stroke" TargetName="Bg" Value="#90717070"/>
                <Setter Property="Stroke" TargetName="OuterBorder" Value="#50FFFFFF"/>
                <Setter Property="Stroke" TargetName="InnerBorder" Value="#50FFFFFF"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
                <Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="true">
                <Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
                <Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#FF9A9A9A"/>
                <Setter Property="Fill" TargetName="GlyphPanel" Value="#848589"/>
            </Trigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="OuterBorder" RadiusY="2" RadiusX="2"/>
            <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="1" RadiusY="1" RadiusX="1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
            <Rectangle x:Name="InnerBorder" Margin="2"/>
            <DockPanel>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                <Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"/>
                <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </DockPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Stroke" TargetName="Bg" Value="#90717070"/>
                <Setter Property="Stroke" TargetName="OuterBorder" Value="#50FFFFFF"/>
                <Setter Property="Stroke" TargetName="InnerBorder" Value="#50FFFFFF"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
                <Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#FF9A9A9A"/>
                <Setter Property="Fill" TargetName="GlyphPanel" Value="#848589"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Grid x:Name="grid" SnapsToDevicePixels="true" Background="#009E8F8F">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="37"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                <Border x:Name="GlyphPanel" BorderBrush="#CDD3E6" BorderThickness="1" Background="#E6EFF4" CornerRadius="3" Height="22" Margin="1" Visibility="Hidden" Width="22">
                    <Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="#0C12A1" FlowDirection="LeftToRight" Height="11" Width="9"/>
                </Border>
                <ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}" Visibility="Collapsed"/>
                <Path Grid.Column="5" Data="{StaticResource RightArrow}" Fill="{TemplateBinding Foreground}" Margin="4,0,0,0" VerticalAlignment="Center"/>
            </Grid>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Right" VerticalOffset="-3">
                <Grid Height="Auto" Width="Auto" Background="{x:Null}">
                    <Border x:Name="SubMenuBorder" BorderBrush="#FF262626" BorderThickness="1" Background="#FF4C4C4F" Margin="0,0,5,5">
                        <Border.Effect>
                            <DropShadowEffect Color="#FF262626" Direction="315" BlurRadius="5" ShadowDepth="3" Opacity="0.5" />
                        </Border.Effect>
                        <ScrollViewer x:Name="SubMenuScrollViewer" Margin="0" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}" VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Disabled">
                            <Grid RenderOptions.ClearTypeHint="Enabled" Background="{x:Null}" Margin="0,8">
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true"/>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true"/>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="grid" Value="#FF5695DB"/>
                <Setter Property="Margin" TargetName="grid" Value="1,0"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#FF9A9A9A"/>
                <Setter Property="Background" TargetName="GlyphPanel" Value="#EEE9E9"/>
                <Setter Property="BorderBrush" TargetName="GlyphPanel" Value="#DBD6D6"/>
                <Setter Property="Fill" TargetName="Glyph" Value="#848589"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="ListBoxItemInSelectButtonStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">

                    <Grid  Background="#00000000">

                        <Border x:Name="Bd" SnapsToDevicePixels="True" Padding="0">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Margin="10,0,0,0"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="#FF5695DB"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
    <Style x:Key="CheckBoxInSelectButton" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Image x:Name="img"  Grid.ColumnSpan="2" HorizontalAlignment="Left" Height="Auto" VerticalAlignment="Center" Width="14" Source="/TrboX;component/resource/images/chk_drop_12_12_n.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="img" Property="Source" Value="/TrboX;component/resource/images/chk_drop_12_12_h.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ProgressBarStatusStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid>

                        <!-- 此 Border 用于显示跟踪。必须将其命名为 PART_Track -->
                        <Border x:Name="PART_Track" Background="#7F9C9C9D" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="0"/>

                        <!-- 此 Border 用于显示进度。必须将其命名为 PART_Indicator，控件才能起作用 -->
                        <Border HorizontalAlignment="Left" x:Name="PART_Indicator" Background="#FF78ACE5" BorderThickness="0" CornerRadius="0" Margin="0"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    
    <!--Nomal Style-->
    <Style x:Key="ButtonNormalStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- 我们将 Grid 用作根，原因在于这便于添加更多的元素来自定义按钮 -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Tag, ElementName=textBlock}" BorderBrush="{TemplateBinding BorderBrush}" ClipToBounds="True" />
                        <Border x:Name="border1" BorderBrush="Black" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" Background="#3F000000" CornerRadius="{Binding CornerRadius, ElementName=Border}" Visibility="Collapsed"/>
                        <Border x:Name="border" BorderBrush="Black" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" Background="#3FFFFFFF" CornerRadius="{Binding CornerRadius, ElementName=Border}" Visibility="Collapsed"/>
                        <TextBlock x:Name="textBlock" HorizontalAlignment="Center" TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" FontFamily="{TemplateBinding FontFamily}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" Tag="{TemplateBinding Tag}" />

                        <!-- Content Presenter 是控件放置文本内容等项之处 -->
                        <!-- 通过利用绑定，无需编辑模板即可将控件参数化 -->
                    </Grid>

                    <!--每种状态都基于模板中的 Border 来设置画笔 -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Visibility" TargetName="border" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Visibility" TargetName="border1" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="Grid" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="RadioButtonMgr" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Background" Value="{DynamicResource PanelBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PanelBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource NavForeground}"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" Background="#00000000" BorderThickness="{TemplateBinding BorderThickness}" >
                        <Border x:Name="border1" BorderBrush="{x:Null}" BorderThickness="0">
                            <TextBlock x:Name="textBlock" TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="#FFC9CDD2"/>
                        </Border>
                    </Border>

                    <!-- BulletDecorator 用于提供 checkmark 与 Content 之间的基线对齐 -->

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                            <Setter Property="Background" TargetName="border" Value="#FF545D6E"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border1" Value="#FF5695DB"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="Black"/>
                            <Setter Property="Foreground" Value="#FFF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#80000000"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#80000000"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarStyleNormal" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="5"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="5"/>
                        </Grid.RowDefinitions>

                        <RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand" Visibility="Hidden">
                            <Grid>
                                <Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
                            </Grid>
                        </RepeatButton>

                        <!-- Track 是一种特殊的布局容器，可调整用于在其一侧执行跳转滚动的 thumb 和 repeat button 的大小 -->
                        <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource ThumbStyleNormal}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand" Visibility="Hidden">
                            <Grid>
                                <Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
                            </Grid>
                        </RepeatButton>
                    </Grid>

                    <!-- 它对 ScrollBar 使用一个模板，并将其旋转为“水平”
					它还会更改命令，使其执行“向左”和“向右”命令，而不是执行“向上”和“向下”命令 -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">

                            <!-- 将 ScrollBar 从“垂直”旋转为“水平” -->
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>

                            <!-- Track 在内部绑定到“方向”，因此我们需要将其旋转回“垂直” -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

                            <!-- 更改命令，以执行“水平”命令 -->
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SimpleScrollRepeatButtonStyle"  TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SimpleRepeatButton"  TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ThumbStyleNormal" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Margin="0,0,0,0" x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="4" Height="Auto" RadiusX="2" RadiusY="2" Fill="#FF535353" StrokeThickness="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                        <Trigger Property="IsDragging" Value="True"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollViewerStyleNormal" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

                        <!-- ScrollBars 的可见性通过控件的实现来控制 -->
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource ScrollBarStyleNormal}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" Background="{x:Null}" BorderThickness="0" Height="18" />
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource ScrollBarStyleNormal}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" Background="{x:Null}" BorderThickness="0" Width="18" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
    <Style x:Key="WorkTabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" Visibility="Collapsed"/>
                        <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBox-View-Style" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
      
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <Border x:Name="border" BorderBrush="Black" BorderThickness="0" Height="18" Width="18">
                                <Border.Background>
                                    <ImageBrush ImageSource="/TrboX;component/resource/images/icon_view_14_14_n.png"/>
                                </Border.Background>
                                <Themes:BulletChrome BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" IsChecked="{TemplateBinding IsChecked}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" Margin="0,0,18,18"/>
                            </Border>
                        </BulletDecorator.Bullet>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <ImageBrush ImageSource="/TrboX;component/resource/images/panel_view_14_14_n.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <ImageBrush ImageSource="/TrboX;component/resource/images/icon_view_14_14_h.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <ImageBrush ImageSource="/TrboX;component/resource/images/panel_view_14_14_h.png.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="HasContent" Value="true">
                            
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxStyleMaxStatus" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <Border x:Name="border" BorderBrush="Black" BorderThickness="0" Height="18" Width="18">
                                <Border.Background>
                                    <ImageBrush ImageSource="/TrboX;component/resource/images/full_screen_14_14_n.png"/>
                                </Border.Background>
                                <Themes:BulletChrome BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" IsChecked="{TemplateBinding IsChecked}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" Margin="0,0,18,18"/>
                            </Border>
                        </BulletDecorator.Bullet>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False"/>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <ImageBrush ImageSource="/TrboX;component/resource/images/normall_screen_14_14_n.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <ImageBrush ImageSource="/TrboX;component/resource/images/full_screen_14_14_h.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <ImageBrush ImageSource="/TrboX;component/resource/images/normall_screen_14_14_h.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="HasContent" Value="true">                          
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <svr:SearchTxtConverter x:Key="SearchTxtConverter"/>
    <svr:UserInputConverter x:Key="UserInputConverter"/>

    
    <Style x:Key="TextBoxStyleSearch" BasedOn="{x:Null}" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="#FF48484A"  HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" Background="#FF272727" BorderThickness="1">
                        <Grid Margin="0">
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="1,1,-1,-1" VerticalContentAlignment="Center"/>
                            <Label Content="{Binding Text, Converter={StaticResource SearchTxtConverter}, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" VerticalAlignment="Stretch" Foreground="#FF747679" Margin="8,0,0,0" VerticalContentAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF4779B1"/>
                        </Trigger>
                        <Trigger Property="TextBlock.TextWrapping" Value="NoWrap"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ListViewStyleNormal" TargetType="{x:Type ListView}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Grid>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                        <ScrollViewer Margin="0" Style="{DynamicResource ScrollViewerStyleNormal}" Focusable="false" Background="{TemplateBinding Background}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">

                            <!-- StackPanel 用来显示子级，方法是将 IsItemsHost 设置为 True -->
                            <!--<StackPanel Margin="2" IsItemsHost="true"/>-->
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewStyleNav" TargetType="{x:Type TreeView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Grid Background="{x:Null}">
                        <Border x:Name="Border" BorderThickness="0" CornerRadius="1">
                            <ScrollViewer Style="{DynamicResource ScrollViewerStyleNormal}" Focusable="False" Padding="0" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" CanContentScroll="False">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Width="15" Height="13" Background="Transparent">
                        <Path Visibility="Collapsed" HorizontalAlignment="Center" Margin="0" x:Name="IsExpandedPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M 0 4 L 8 4 L 4 8 Z" Height="6" Stretch="Fill" Width="8"/>
                        <Path HorizontalAlignment="Center" Margin="0" x:Name="ExpandPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M 4 0 L 8 4 L 4 8 Z" Width="6" Stretch="Fill" Height="8"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="IsExpandedPath"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ExpandPath"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemStyleRoot"  TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>      
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid x:Name="grid" Background="{x:Null}">                        
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="32" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="32"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid.ContextMenu>
                            <ContextMenu Style="{DynamicResource ContextMenuStyleNormal}">
                                <MenuItem  Header="添加到快速操作"   Command="{Binding Header.AddFastPanel, RelativeSource={RelativeSource TemplatedParent}}"  Style="{DynamicResource ContextMenuItemStyle}"/>
                                <Separator Margin="1,0"      Style="{DynamicResource SeparatorStyleNormal}" Height="16"/>
                                <MenuItem  Header="呼叫"   IsEnabled="{Binding Header.CanCall, RelativeSource={RelativeSource TemplatedParent}}"   Command="{Binding Header.Call, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter = "Start" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.ScheduleVisible}"/>
                                <MenuItem  Header="结束呼叫"  IsEnabled="{Binding Header.CanStopCall, RelativeSource={RelativeSource TemplatedParent}}" Command="{Binding Header.Call, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter = "Stop" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.ScheduleVisible}"/>
                                <MenuItem  Header="短消息"  IsEnabled="{Binding Header.CanShortMessage, RelativeSource={RelativeSource TemplatedParent}}" Command="{Binding Header.OpenOperateWindow, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter = "ShortMessage" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.ShortMessageVisible}"/>
                                <MenuItem Header="GPS位置" IsEnabled="{Binding Header.EnableLocationFunc, RelativeSource={RelativeSource TemplatedParent}}"  Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.LocationVisible}">
                                    <MenuItem  Header="单次查询"     Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="Immediate" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="周期查询"     Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StartTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="停止周期查询" Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StopTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanStopLocation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Separator Margin="1,0" Visibility="{x:Static svr:FunctionConfigure.TrackVisible}" Style="{DynamicResource SeparatorStyleNormal}" Height="16"/>
                                    <MenuItem  Header="轨迹回放" Visibility="{x:Static svr:FunctionConfigure.TrackVisible}" Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="Track" Style="{DynamicResource ContextMenuItemStyle}"/>
                                </MenuItem>
                                <MenuItem Header="室内位置"  IsEnabled="{Binding Header.EnableLocationInDoorFunc, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.LocationInDoorVisible}">
                                    <MenuItem  Header="单次查询" Command="{Binding Header.LocationInDoor, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="Immediate" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocationInDoor, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="周期查询" Command="{Binding Header.LocationInDoor, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StartTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocationInDoor, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="停止周期查询"  Command="{Binding Header.LocationInDoor, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StopTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanStopLocationInDoor, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </MenuItem>
                            </ContextMenu>
                        </Grid.ContextMenu>
                        <Border  Grid.ColumnSpan="3" x:Name="Selection_Border" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" VerticalAlignment="Stretch" BorderThickness="0,1"/>
                        <Border x:Name="border" Grid.Column="1" BorderBrush="{x:Null}" BorderThickness="0" HorizontalAlignment="Stretch" Height="Auto" Grid.RowSpan="1" VerticalAlignment="Stretch" Width="Auto" Margin="0" Background="{x:Null}">
                            <DockPanel HorizontalAlignment="Stretch" LastChildFill="False" Width="Auto">
                                <Image Visibility="{Binding Header.InCallStatusVisible, RelativeSource={RelativeSource TemplatedParent}}" Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="18" MaxHeight="18" HorizontalAlignment="Left"  DockPanel.Dock="Right" Source="/TrboX;component/resource/images/call_22_22_h.png"/>
                                <Image Visibility="{Binding Header.FailureIconVisible, RelativeSource={RelativeSource TemplatedParent}}" Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="16" MaxHeight="16" HorizontalAlignment="Left"  DockPanel.Dock="Right" Source="/TrboX;component/resource/images/warning.png"/>
                                <ctrl:LoadIcon Visibility="{Binding Header.WaitIconVisible, Mode=OneWay,RelativeSource={RelativeSource TemplatedParent}}" Width="16" Height="16" Margin="0,0,8,0" Opacity="0.6" HorizontalAlignment="Left"   DockPanel.Dock="Right"/>
                                <TextBlock x:Name="textBlock" TextWrapping="Wrap" Text="{Binding Header.ByName, RelativeSource={RelativeSource TemplatedParent}}" Foreground="#FFBEC3C7" FontSize="13" Margin="0,7.745,10,7.745" VerticalAlignment="Center" Width="Auto"/>
                            </DockPanel>
                        </Border>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource ToggleButtonStyle1}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" VerticalAlignment="Center" Foreground="#FFBEC3C7" HorizontalAlignment="Right" Height="Auto" Margin="0,0,3.5,0"/>
                        <ItemsPresenter Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" x:Name="ItemsHost"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Selection_Border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Expander">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="Expander"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#FF545D6E"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#FF0C0C0D"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="Selection_Border" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemStyle2nd" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid x:Name="grid" Background="{x:Null}">
                        <Grid.ContextMenu>
                            <ContextMenu Style="{DynamicResource ContextMenuStyleNormal}" Visibility="{Binding Header.ContextMenuVisible, RelativeSource={RelativeSource TemplatedParent}}" >
                                <MenuItem  Header="打开"  Command="{Binding Header.OpenOperateWindow, RelativeSource={RelativeSource TemplatedParent}}"  CommandParameter = "Schedule" Style="{DynamicResource ContextMenuItemStyle}"/>
                                <MenuItem  Header="添加到快速操作"   Command="{Binding Header.AddFastPanel, RelativeSource={RelativeSource TemplatedParent}}"  Style="{DynamicResource ContextMenuItemStyle}"/>
                                <Separator Margin="1,0"      Style="{DynamicResource SeparatorStyleNormal}" Height="16"/>
                                <MenuItem  Header="呼叫"   IsEnabled="{Binding Header.CanCall, RelativeSource={RelativeSource TemplatedParent}}"   Command="{Binding Header.Call, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter = "Start" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.ScheduleVisible}"/>
                                <MenuItem  Header="结束呼叫"  IsEnabled="{Binding Header.CanStopCall, RelativeSource={RelativeSource TemplatedParent}}" Command="{Binding Header.Call, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter = "Stop" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.ScheduleVisible}"/>
                                <MenuItem  Header="短消息"  IsEnabled="{Binding Header.CanShortMessage, RelativeSource={RelativeSource TemplatedParent}}" Command="{Binding Header.OpenOperateWindow, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter = "ShortMessage" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.ShortMessageVisible}"/>
                                <MenuItem Header="GPS位置" IsEnabled="{Binding Header.EnableLocationFunc, RelativeSource={RelativeSource TemplatedParent}}"  Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.LocationVisible}">
                                    <MenuItem  Header="单次查询"     Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="Immediate" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="周期查询"     Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StartTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="停止周期查询" Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StopTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanStopLocation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Separator Margin="1,0" Visibility="{x:Static svr:FunctionConfigure.TrackVisible}" Style="{DynamicResource SeparatorStyleNormal}" Height="16"/>
                                    <MenuItem  Header="轨迹回放" Visibility="{x:Static svr:FunctionConfigure.TrackVisible}" Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="Track" Style="{DynamicResource ContextMenuItemStyle}"/>
                                </MenuItem>
                                <MenuItem Header="室内位置"  IsEnabled="{Binding Header.EnableLocationInDoorFunc, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.LocationInDoorVisible}">
                                    <MenuItem  Header="单次查询" Command="{Binding Header.LocationInDoor, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="Immediate" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocationInDoor, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="周期查询" Command="{Binding Header.LocationInDoor, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StartTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocationInDoor, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="停止周期查询"  Command="{Binding Header.LocationInDoor, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StopTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanStopLocationInDoor, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </MenuItem>
                            </ContextMenu>
                        </Grid.ContextMenu>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="48" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="32"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border  Grid.ColumnSpan="3" x:Name="Selection_Border" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" VerticalAlignment="Stretch" BorderThickness="0,1"/>
                        <Border x:Name="border" Grid.Column="1" BorderBrush="{x:Null}" BorderThickness="0" HorizontalAlignment="Stretch" Height="Auto" Grid.RowSpan="1" VerticalAlignment="Stretch" Width="Auto" Margin="0" Background="{x:Null}">
                            <DockPanel HorizontalAlignment="Stretch" LastChildFill="False" Width="Auto">
                                <!--<Controls:Icon Command="{Binding Header.Abnormal, RelativeSource={RelativeSource TemplatedParent}}" Height="12" VerticalAlignment="Center" Width="12" MaxWidth="18" MaxHeight="18" HorizontalAlignment="Left"  DockPanel.Dock="Right" Image="/TrboX;component/resource/images/Abnormal.png" HoverImage="/TrboX;component/resource/images/Abnormal_h.png" Margin="0"  />-->
                                <Image Visibility="{Binding Header.InCallStatusVisible, RelativeSource={RelativeSource TemplatedParent}}" Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="18" MaxHeight="18" HorizontalAlignment="Left"   DockPanel.Dock="Right" Source="/TrboX;component/resource/images/call_22_22_h.png"/>
                                <Image Visibility="{Binding Header.FailureIconVisible, RelativeSource={RelativeSource TemplatedParent}}" Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="16" MaxHeight="16" HorizontalAlignment="Left"  DockPanel.Dock="Right" Source="/TrboX;component/resource/images/warning.png"/>
                                <ctrl:LoadIcon Visibility="{Binding Header.WaitIconVisible, Mode=OneWay,RelativeSource={RelativeSource TemplatedParent}}" Width="16" Height="16" Margin="0,0,8,0" Opacity="0.6" HorizontalAlignment="Left"   DockPanel.Dock="Right"/>
                                <TextBlock x:Name="textBlock" TextWrapping="Wrap" Text="{Binding Header.FullName, RelativeSource={RelativeSource TemplatedParent}}" Foreground="#FFBEC3C7" FontSize="13" Margin="0,7.745,10,7.745" VerticalAlignment="Center" Width="Auto"/>
                            </DockPanel>
                        </Border>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource ToggleButtonStyle1}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" VerticalAlignment="Center" Foreground="#FFBEC3C7" HorizontalAlignment="Right" Height="Auto" Margin="0,0,3.5,0"/>
                        <ItemsPresenter Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" x:Name="ItemsHost"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Selection_Border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Expander">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="Expander"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#FF545D6E"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#FF0C0C0D"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="Selection_Border" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemStyle3rd"  TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid x:Name="grid" Background="{x:Null}">
                        <Grid.ContextMenu>
                            <ContextMenu Style="{DynamicResource ContextMenuStyleNormal}" Visibility="{Binding Header.ContextMenuVisible, RelativeSource={RelativeSource TemplatedParent}}" >
                                <MenuItem  Header="打开"  Command="{Binding Header.OpenOperateWindow, RelativeSource={RelativeSource TemplatedParent}}"  CommandParameter = "Schedule" Style="{DynamicResource ContextMenuItemStyle}" />
                                <MenuItem  Header="添加到快速操作"   Command="{Binding Header.AddFastPanel, RelativeSource={RelativeSource TemplatedParent}}"  Style="{DynamicResource ContextMenuItemStyle}"/>
                                <Separator Margin="1,0"      Style="{DynamicResource SeparatorStyleNormal}" Height="16"/>
                                <MenuItem  Header="在线检测" IsEnabled="{Binding Header.CanCheckOnline, RelativeSource={RelativeSource TemplatedParent}}" Command="{Binding Header.Control, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="Check" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.ControlerVisible}"/>
                                <MenuItem  Header="远程监听" IsEnabled="{Binding Header.CanMonitor, RelativeSource={RelativeSource TemplatedParent}}" Command="{Binding Header.Control, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="Monitor" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.ControlerVisible}"/>
                                <Separator Margin="1,0"      Style="{DynamicResource SeparatorStyleNormal}" Height="16" Visibility="{x:Static svr:FunctionConfigure.ControlerVisible}"/>
                                <MenuItem  Header="呼叫"   IsEnabled="{Binding Header.CanCall, RelativeSource={RelativeSource TemplatedParent}}"   Command="{Binding Header.Call, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter = "Start" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.ScheduleVisible}"/>
                                <MenuItem  Header="结束呼叫"  IsEnabled="{Binding Header.CanStopCall, RelativeSource={RelativeSource TemplatedParent}}" Command="{Binding Header.Call, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter = "Stop" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.ScheduleVisible}"/>
                                <MenuItem  Header="短消息"  IsEnabled="{Binding Header.CanShortMessage, RelativeSource={RelativeSource TemplatedParent}}" Command="{Binding Header.OpenOperateWindow, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter = "ShortMessage" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.ShortMessageVisible}"/>
                                <MenuItem Header="GPS位置" IsEnabled="{Binding Header.EnableLocationFunc, RelativeSource={RelativeSource TemplatedParent}}"  Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.LocationVisible}">
                                    <MenuItem  Header="单次查询"     Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="Immediate" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="周期查询"     Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StartTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="停止周期查询" Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StopTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanStopLocation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Separator Margin="1,0" Visibility="{x:Static svr:FunctionConfigure.TrackVisible}" Style="{DynamicResource SeparatorStyleNormal}" Height="16"/>
                                    <MenuItem  Header="轨迹回放" Visibility="{x:Static svr:FunctionConfigure.TrackVisible}" Command="{Binding Header.QueryLocation, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="Track" Style="{DynamicResource ContextMenuItemStyle}"/>
                                </MenuItem>
                                <MenuItem Header="室内位置"  IsEnabled="{Binding Header.EnableLocationInDoorFunc, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource ContextMenuItemStyle}" Visibility="{x:Static svr:FunctionConfigure.LocationInDoorVisible}">
                                    <MenuItem  Header="单次查询" Command="{Binding Header.LocationInDoor, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="Immediate" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocationInDoor, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="周期查询" Command="{Binding Header.LocationInDoor, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StartTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanLocationInDoor, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <MenuItem  Header="停止周期查询"  Command="{Binding Header.LocationInDoor, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StopTriggered" Style="{DynamicResource ContextMenuItemStyle}"  IsEnabled="{Binding Header.CanStopLocationInDoor, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </MenuItem>
                                <MenuItem Header="指令控制"  IsEnabled="{Binding Header.EnableControlFunc, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource ContextMenuItemStyle}"  Visibility="{x:Static svr:FunctionConfigure.ControlerVisible}" >
                                    <MenuItem  Header="遥开" IsEnabled="{Binding Header.CanShartUp, RelativeSource={RelativeSource TemplatedParent}}"   Command="{Binding Header.Control, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="StartUp" Style="{DynamicResource ContextMenuItemStyle}"/>
                                    <MenuItem  Header="遥毙" IsEnabled="{Binding Header.CanShutDown, RelativeSource={RelativeSource TemplatedParent}}"  Command="{Binding Header.Control, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="ShutDown" Style="{DynamicResource ContextMenuItemStyle}"/>
                                </MenuItem>
                                <Separator Margin="1,0"  Style="{DynamicResource SeparatorStyleNormal}" Height="16"  Visibility="{x:Static svr:FunctionConfigure.JobTicketVisible}" />
                                <MenuItem  Header="工单" Style="{DynamicResource ContextMenuItemStyle}"  Visibility="{x:Static svr:FunctionConfigure.JobTicketVisible}"/>
                            </ContextMenu>
                        </Grid.ContextMenu>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="64" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="32"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border  Grid.ColumnSpan="3" x:Name="Selection_Border" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" VerticalAlignment="Stretch" BorderThickness="0,1"/>
                        <Border x:Name="border" Grid.Column="1" BorderBrush="{x:Null}" BorderThickness="0" HorizontalAlignment="Stretch" Height="Auto" Grid.RowSpan="1" VerticalAlignment="Stretch" Width="Auto" Margin="0" Background="{x:Null}">
                            <DockPanel HorizontalAlignment="Stretch" LastChildFill="False" Width="Auto"  >
                                <Image Height="Auto" Opacity="{Binding Header.OnlineOpacity, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Width="Auto" MaxWidth="18" MaxHeight="18" HorizontalAlignment="Left"  Source="{Binding Header.Icon, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,5,0" />
                                <!--<Controls:Icon Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="18" MaxHeight="18" HorizontalAlignment="Left"  DockPanel.Dock="Right" Image="/TrboX;component/resource/images/bluetooth.png"  />-->
                                <Image Visibility="{Binding Header.ShutDownStatusVisible, RelativeSource={RelativeSource TemplatedParent}}" Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="18" MaxHeight="18" HorizontalAlignment="Left"  DockPanel.Dock="Right" Source="/TrboX;component/resource/images/shutdown_22_22_h.png" />
                                <Image Visibility="{Binding Header.LocationInDoorStatusVisible, RelativeSource={RelativeSource TemplatedParent}}" Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="18" MaxHeight="16" HorizontalAlignment="Left"   Margin="0,0,0,-2.5" DockPanel.Dock="Right" Source="/TrboX;component/resource/images/start_locationindoor_22_h.png" />
                                <Image Visibility="{Binding Header.LocationStatusVisible, RelativeSource={RelativeSource TemplatedParent}}" Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="18" MaxHeight="18" HorizontalAlignment="Left"   Margin="0,0,0,-1" DockPanel.Dock="Right" Source="/TrboX;component/resource/images/position_22_22_h.png"/>
                                <Image Visibility="{Binding Header.InCallStatusVisible, RelativeSource={RelativeSource TemplatedParent}}" Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="18" MaxHeight="18" HorizontalAlignment="Left"   DockPanel.Dock="Right" Source="/TrboX;component/resource/images/call_22_22_h.png"/>
                                <Image Visibility="{Binding Header.FailureIconVisible, RelativeSource={RelativeSource TemplatedParent}}" Height="Auto" VerticalAlignment="Center" Width="Auto" MaxWidth="16" MaxHeight="16" HorizontalAlignment="Left"  DockPanel.Dock="Right" Source="/TrboX;component/resource/images/warning.png"/>
                                <ctrl:LoadIcon Visibility="{Binding Header.WaitIconVisible, Mode=OneWay,RelativeSource={RelativeSource TemplatedParent}}" Width="16" Height="16" Margin="0,0,8,0" Opacity="0.6" HorizontalAlignment="Left"   DockPanel.Dock="Right" />
                                <TextBlock x:Name="textBlock" TextWrapping="Wrap" Text="{Binding Header.FullName, RelativeSource={RelativeSource TemplatedParent}}" Foreground="#FFBEC3C7" FontSize="13" Margin="0,7.745,10,7.745" VerticalAlignment="Center" Width="Auto" />                                
                            </DockPanel>
                        </Border>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource ToggleButtonStyle1}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" VerticalAlignment="Center" Foreground="#FFBEC3C7" HorizontalAlignment="Right" Height="Auto" Margin="0,0,3.5,0"/>
                        <ItemsPresenter Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" x:Name="ItemsHost"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Selection_Border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="border">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Expander">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#11D3D3FF"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="Expander"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Selection_Border" Value="#FF545D6E"/>
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="#FF0C0C0D"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="#FFD2DFF5"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="#FFD2DFF5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="Selection_Border" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContextMenuStyleNormal" TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid>
                        <Border x:Name="Border" Background="#FF4C4C4F" BorderBrush="#FF262626" Margin="5" BorderThickness="1">
                            <Border.Effect>
                                <DropShadowEffect Opacity="0.5"/>
                            </Border.Effect>

                            <ItemsPresenter Margin="0,8"/>
                        </Border>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckRadioFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="CheckBoxStylePTT" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <!--<Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>-->
        <Setter Property="BorderThickness" Value="1"/>
        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="border" Background="#FFE69247" BorderThickness="0" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" >
                        <TextBlock  x:Name="txt" TextWrapping="Wrap" Text="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" FontSize="14" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFFF8B23"/>
                        </Trigger>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Text" TargetName="txt" Value="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyleFastCall" TargetType="{x:Type Button}">
        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>-->
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="Black" BorderThickness="0" HorizontalAlignment="Stretch" Height="32" VerticalAlignment="Top" Width="Auto" Background="#FFE69247">
                        <TextBlock TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White" FontSize="14"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFFF8B23"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFCC8023"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyleFastSend" TargetType="{x:Type Button}">
        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>-->
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="Black" BorderThickness="0" HorizontalAlignment="Stretch" Height="32" VerticalAlignment="Top" Width="Auto" Background="#FF78ACE5">
                        <TextBlock TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White" FontSize="14"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FF70B4FF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="TextBoxBorder" EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
        <GradientStop Color="#ABADB3" Offset="0.05"/>
        <GradientStop Color="#E2E3EA" Offset="0.07"/>
        <GradientStop Color="#E3E9EF" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="TextBoxStyleNormal" BasedOn="{x:Null}" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border BorderBrush="#FF505053" BorderThickness="1" HorizontalAlignment="Stretch" Width="Auto" Background="#FF3B3B3D">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="5,2.5" Padding="0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ButtonStyleSubWin" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- 我们将 Grid 用作根，原因在于这便于添加更多的元素来自定义按钮 -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Padding="{TemplateBinding Padding}" BorderThickness="1" Background="#FF3B3B3D" CornerRadius="4" BorderBrush="#FF5C5C5D"/>
                        <TextBlock x:Name="textBlock" HorizontalAlignment="Center" TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" FontFamily="Microsoft YaHei UI" Foreground="#FFCFCFCF" FontSize="14"/>

                        <!-- Content Presenter 是控件放置文本内容等项之处 -->
                        <!-- 通过利用绑定，无需编辑模板即可将控件参数化 -->
                    </Grid>

                    <!--每种状态都基于模板中的 Border 来设置画笔 -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="#FF545D6E"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="#FF545D6E"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="Grid" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyleUnSend" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- 我们将 Grid 用作根，原因在于这便于添加更多的元素来自定义按钮 -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Padding="{TemplateBinding Padding}" BorderThickness="0" Background="#FF4C4C4F" CornerRadius="0" BorderBrush="#FF5C5C5D"/>
                        <TextBlock x:Name="textBlock" HorizontalAlignment="Center" TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" FontFamily="Microsoft YaHei UI" Foreground="#FFCFCFCF" FontSize="14"/>

                        <!-- Content Presenter 是控件放置文本内容等项之处 -->
                        <!-- 通过利用绑定，无需编辑模板即可将控件参数化 -->
                    </Grid>

                    <!--每种状态都基于模板中的 Border 来设置画笔 -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="#FF545D6E"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="#FF545D6E"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="Grid" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioButtonStyleNav" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
        <Setter Property="Foreground" Value="#ffFFFFFF"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="grid" Margin="0" Height="24">
                        <Border x:Name="border1_Copy1" BorderBrush="#FF626262" BorderThickness="1" Background="#FF3B3B3D" CornerRadius="4"/>
                        <Border x:Name="border1_Copy2" BorderBrush="{x:Null}" BorderThickness="0" Background="#FF78ACE5" CornerRadius="4" Visibility="Collapsed"/>
                        <Border x:Name="border1" BorderBrush="{x:Null}" BorderThickness="0" Background="#3F000000" CornerRadius="4" Visibility="Collapsed"/>
                        <Border x:Name="border1_Copy" BorderBrush="{x:Null}" BorderThickness="0" Background="#3FFFFFFF" CornerRadius="4" Visibility="Collapsed"/>
                        <ContentPresenter Margin="10,1" RecognizesAccessKey="True" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Grid>

                    <!-- BulletDecorator 用于提供 checkmark 与 Content 之间的基线对齐 -->

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="border1_Copy2" Value="Visible"/>
                            <!--<Setter Property="Foreground" Value="#FF333333"/>-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Visibility" TargetName="border1_Copy" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Visibility" TargetName="border1" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="grid" Value="0.5"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--static resource-->
    <LinearGradientBrush  x:Key="CutOffRuleTop"
						EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF3B3B3D" Offset="0"/>
        <GradientStop Color="#FF606064" Offset="0.5"/>
        <GradientStop Color="#FF3B3B3D" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush  x:Key="CutOffRuleButtom"
						EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF3B3B3D" Offset="0"/>
        <GradientStop Color="#FF2B2B2B" Offset="0.3"/>
        <GradientStop Color="#FF1D1D1D" Offset="0.6"/>
        <GradientStop Color="#FF3B3B3D" Offset="0.1"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="TitleBackground" Color="#FF242424"/>
    <SolidColorBrush x:Key="AppBackground" Color="#FF1D1D1F"/>
    <SolidColorBrush x:Key="PanelBackground" Color="#FF3B3B3D"/>
    <SolidColorBrush x:Key="PanelBorderBrush" Color="#FF0F0F10"/>
    <SolidColorBrush x:Key="PopupBackGround" Color="#FF4C4C4F"/>
    <SolidColorBrush x:Key="PopupBorderBrush" Color="#FF262626"/>

    <SolidColorBrush x:Key="NavForeground" Color ="#FFBEBEC0" />

</ResourceDictionary>