<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Dispatcher.Controls"
    xmlns:Controls="clr-namespace:Sigmar.Controls;assembly=Sigmar"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity" >

    
    
    <Style  TargetType="{x:Type local:SelectButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SelectButton}">
                    <Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4">
                        <Grid>
                            <Grid>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,0,12,0">
                                <Controls:Icon x:Name="icon" Image="{Binding Image, RelativeSource={RelativeSource TemplatedParent}}" Width="Auto" HoverImage="{Binding HoverImage, RelativeSource={RelativeSource TemplatedParent}}" DisableImage="{Binding DisableImage, RelativeSource={RelativeSource TemplatedParent}}" PressedImage="{Binding PressedImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <TextBlock  Text="{Binding Contents, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Foreground="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" FontFamily="{Binding FontFamily, RelativeSource={RelativeSource TemplatedParent}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"  />
                                </StackPanel>
                                <CheckBox x:Name="checkbox" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource CheckBoxInSelectButton}" DockPanel.Dock="Right" HorizontalAlignment="Right" />
                            </Grid>
                            <Popup IsOpen="{Binding IsChecked, ElementName=checkbox}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" HorizontalOffset="{TemplateBinding PopupHorizontalOffset}" VerticalOffset="{TemplateBinding PopupVerticalOffset}" PopupAnimation="Slide">
                                <Border Background="{DynamicResource PopupBackGround}" Width="Auto" Height="Auto" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderBrush}">
                                    <Border.Effect>
                                        <DropShadowEffect Color="#FF262626" Direction="315" BlurRadius="5" ShadowDepth="3" Opacity="0.5" />
                                    </Border.Effect>
                                    <ListBox x:Name="list" Margin="0,8" Background="{x:Null}" BorderThickness="0" ItemsSource="{Binding Items, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:ResourceView}, ResourceId = ResourceView}" 
           TargetType="{x:Type ListView}"
           BasedOn="{StaticResource {x:Type ListBox}}">

        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="0.5" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Width="{Binding (FrameworkElement.ActualWidth),RelativeSource={RelativeSource AncestorType=ScrollContentPresenter}}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:ResourceView}, ResourceId = ResourceViewItem}" 
           TargetType="{x:Type ListViewItem}"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="ContentTemplate" Value="{Binding Path= View.ItemTemplate, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListView}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderThickness="0,1" SnapsToDevicePixels="True">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#11D3D3FF"/>
                            <Setter Property="Background" TargetName="Bd" Value="#11D3D3FF"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FF0C0C0D"/>
                            <Setter Property="Background" TargetName="Bd" Value="#FF545D6E"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:QuickPanelView}, ResourceId = QuickPanelView}" 
           TargetType="{x:Type ListView}"
           BasedOn="{StaticResource {x:Type ListBox}}">

        <Setter Property="BorderBrush" Value="Black"/>
        <!--<Setter Property="BorderThickness" Value="0.5" />-->
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Width="{Binding (FrameworkElement.ActualWidth),RelativeSource={RelativeSource AncestorType=ScrollContentPresenter}}"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:QuickPanelView}, ResourceId = QuickPanelViewItem}" 
           TargetType="{x:Type ListViewItem}"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Margin" Value="7,5"/>
        <!--<Setter Property="Padding" Value="3"/>-->
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="ContentTemplate" Value="{Binding Path= View.ItemTemplate, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListView}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="#FF0C0C0D" BorderThickness="1" Background="#FF242424" SnapsToDevicePixels="True">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FF5695DB"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FFFFC323"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FFFFC323"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type local:TargetSelector}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TargetSelector}">
                    <Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid>
                                <ListView BorderThickness="0"  ScrollViewer.VerticalScrollBarVisibility="Disabled" Background="{x:Null}" Margin="0,0,5,0" MaxHeight="90" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ItemsSource="{Binding SelectedItemsDisplay, RelativeSource={RelativeSource TemplatedParent}}"  >
                                    <ListView.View>
                                        <local:TargetView>
                                            <local:TargetView.ItemTemplate>
                                                <DataTemplate>
                                                    <DockPanel>
                                                        <Border x:Name="CurMsg" BorderThickness="1" BorderBrush="#FF5F5F61" CornerRadius="11" Padding="8,0" Height="22" Background="#FF565659" Margin="3,0" Visibility="Visible" >
                                                            <TextBlock x:Name="txt_contents"  Text="{Binding Name}"  Foreground="#FFB6BABE" FontSize="12" VerticalAlignment="Center"></TextBlock>
                                                        </Border>
                                                        <TextBlock x:Name="txt_more"  Text="......"  Foreground="#FFB6BABE" FontSize="12" VerticalAlignment="Center" Visibility="Collapsed"></TextBlock>
                                                    </DockPanel>
                                                    <DataTemplate.Triggers>
                                                        <DataTrigger Binding="{Binding}" Value="...">
                                                            <Setter TargetName="CurMsg" Property="Visibility" Value="Collapsed" />
                                                            <Setter TargetName="txt_more" Property="Visibility" Value="Visible" />
                                                        </DataTrigger>

                                                    </DataTemplate.Triggers>
                                                </DataTemplate>
                                            </local:TargetView.ItemTemplate>
                                        </local:TargetView>
                                    </ListView.View>
                                </ListView>
                                <CheckBox x:Name="checkbox" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource CheckBoxStyleToggleRight}" Margin="0" DockPanel.Dock="Right" ></CheckBox>
                            </Grid>
                            <Popup IsOpen="{Binding IsChecked, ElementName=checkbox}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True"  HorizontalOffset="{Binding PopupHorizontalOffset, RelativeSource={RelativeSource TemplatedParent}}" VerticalOffset="{Binding PopupVerticalOffset, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="Slide" >
                                <Border Width="Auto" Height="Auto" BorderThickness="1" Background="#F94C4C4F" BorderBrush="#FF505053">
                                    <!--<Border.Effect>
                                            <DropShadowEffect Color="#FF262626" Direction="315" BlurRadius="5" ShadowDepth="3" Opacity="0.5" />
                                        </Border.Effect>-->
                                    <ListView x:Name="groups" BorderThickness="0" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Background="{x:Null}" Margin="0,6" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Auto" Style="{DynamicResource ListViewStyleNormal}" ItemsSource="{Binding Items, RelativeSource={RelativeSource TemplatedParent}}" SelectionMode="Single" >
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="SelectionChanged">
                                                <i:InvokeCommandAction Command="{Binding SelectionChanged, Mode=OneWay}" CommandParameter="{Binding SelectedItem, ElementName=groups}" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                        <ListView.View>
                                            <local:ResourceView>
                                                <local:ResourceView.ItemTemplate>
                                                    <DataTemplate>
                                                        <Border x:Name="Msg" ToolTip="{Binding NameInfo}" Margin="0" HorizontalAlignment="Stretch"  VerticalAlignment="Stretch" Background="#00000000" Height="32">
                                                            <i:Interaction.Triggers>
                                                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                                                    <i:InvokeCommandAction Command="{Binding SelectedChanged, Mode=OneWay}"/>
                                                                </i:EventTrigger>
                                                            </i:Interaction.Triggers>

                                                            <DockPanel Opacity="{Binding  Contact.OnlineOpacity}">
                                                                <Grid  Width="14" Height="14" Margin="17,0,0,0" Visibility="{Binding MultipleCheckBoxVisible, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:TargetSelector}}}" >
                                                                    <CheckBox IsChecked="{Binding IsSelected}" VerticalAlignment="Center" Width="14" Height="14"  Style="{DynamicResource CheckBoxStyleNormal}" ClickMode="Press"/>
                                                                    <!-- recover checkbox to let click it invalid -->
                                                                    <Border Background="Transparent" Width="14" Height="14"/>
                                                                </Grid>
                                                                <Image Source="{Binding Target.Icon}" Width="20" Height="20" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="16,0,0,0" />
                                                                <TextBlock Text="{Binding  Target.FullName}"  TextWrapping="NoWrap" Margin="5,0,17,0" VerticalAlignment="Center" DockPanel.Dock="Left" Height="Auto"  Foreground="#FFD2DFF5" FontSize="13" FontFamily="Hiragino Sans GB W3"/>
                                                            </DockPanel>
                                                        </Border>
                                                    </DataTemplate>
                                                </local:ResourceView.ItemTemplate>
                                            </local:ResourceView>
                                        </ListView.View>
                                    </ListView>

                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:TargetView}, ResourceId = TargetView}" 
           TargetType="{x:Type ListView}"
           BasedOn="{StaticResource {x:Type ListBox}}">

        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="0.5" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>                   
                    <StackPanel Width="{Binding (FrameworkElement.ActualWidth),RelativeSource={RelativeSource AncestorType=ScrollContentPresenter}}" Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:TargetView}, ResourceId = TargetViewItem}" 
           TargetType="{x:Type ListViewItem}"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ContentTemplate" Value="{Binding Path= View.ItemTemplate, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListView}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ListBtnTemplate" TargetType="{x:Type UserControl}">
        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    </ControlTemplate>


    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:TitleView}, ResourceId = TitleView}" 
           TargetType="{x:Type ListView}"
           BasedOn="{StaticResource {x:Type ListBox}}">

        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Margin="1,0,0,0" Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:TitleView}, ResourceId = TitleViewItem}" 
           TargetType="{x:Type ListViewItem}"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="ContentTemplate" Value="{Binding Path= View.ItemTemplate, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListView}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderThickness="1" SnapsToDevicePixels="True" BorderBrush="#FF0C0C0D" Margin="-1,0,0,0">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter Property="BorderBrush" TargetName="Bd" Value="#11D3D3FF"/>-->
                            <Setter Property="Background" TargetName="Bd" Value="#11D3D3FF"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="border" Value="#FF535353"/>-->
                            <!--<Setter Property="BorderBrush" TargetName="Bd" Value="#FF0C0C0D"/>-->
                            <Setter Property="Background" TargetName="Bd" Value="#FF535353"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:PointView}, ResourceId = PointView}" 
           TargetType="{x:Type ListView}"
           BasedOn="{StaticResource {x:Type ListBox}}">

        <Setter Property="BorderBrush" Value="Black"/>    
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Grid/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:PointView}, ResourceId = PointViewItem}" 
           TargetType="{x:Type ListViewItem}"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="ContentTemplate" Value="{Binding Path= View.ItemTemplate, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListView}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border >
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            --><!--<Setter Property="BorderBrush" TargetName="Bd" Value="#11D3D3FF"/>--><!--
                            <Setter Property="Background" TargetName="Bd" Value="#11D3D3FF"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            --><!--<Setter Property="Background" TargetName="border" Value="#FF535353"/>-->
                            <!--<Setter Property="BorderBrush" TargetName="Bd" Value="#FF0C0C0D"/>--><!--
                            <Setter Property="Background" TargetName="Bd" Value="#FF535353"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="{x:Type local:BeaconPoint}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:BeaconPoint}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnLoaded1" RepeatBehavior="Forever">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="ellipse">
                                <EasingColorKeyFrame KeyTime="0" Value="#008E8EF1"/>
                                <EasingColorKeyFrame KeyTime="0:0:1" Value="#00A7A7F3"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="ellipse">
                                <EasingColorKeyFrame KeyTime="0" Value="#00A7A7F3"/>
                                <EasingColorKeyFrame KeyTime="0:0:1" Value="#00A7A7F3"/>
                            </ColorAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Offset)" Storyboard.TargetName="ellipse">
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Offset)" Storyboard.TargetName="ellipse">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.284"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.428"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.637"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:3" Value="0.297"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Offset)" Storyboard.TargetName="ellipse">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.859"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.68"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.997"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:3" Value="0.742"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="ellipse">
                                <EasingColorKeyFrame KeyTime="0" Value="#FF8E8EF1"/>
                                <EasingColorKeyFrame KeyTime="0:0:1" Value="#FF1F83E6"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid HorizontalAlignment="Left" Height="100" VerticalAlignment="Top" Width="100" Background="{x:Null}">
                        <Border x:Name="border" BorderBrush="Black" BorderThickness="0" HorizontalAlignment="Left" Height="100" VerticalAlignment="Top" Width="100" Background="#00000000" Visibility="Visible">
                            <Ellipse x:Name="ellipse" HorizontalAlignment="Left" Height="100"  VerticalAlignment="Top" Width="100" Visibility="Hidden" Margin="0,0,-2,-2">
                                <Ellipse.Fill>
                                    <RadialGradientBrush>
                                        <GradientStop Color="Black" Offset="0"/>
                                        <GradientStop Color="White" Offset="1"/>
                                        <GradientStop Color="#FFA7A7F3" Offset="0.493"/>
                                    </RadialGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                        </Border>
                        <Image x:Name="img_Bluetooth" HorizontalAlignment="Center" Height="20" VerticalAlignment="Center" Source="/TrboX;component/resource/images/bluetooth.png" Width="20">
                        </Image>
                        <Border x:Name="border1" BorderBrush="#CC4E77E4" BorderThickness="1" HorizontalAlignment="Center" Height="20" VerticalAlignment="Top" Margin="0,62.669,0,0" CornerRadius="4" Background="#99FFFFFF" Visibility="Hidden">
                            <TextBlock TextWrapping="Wrap" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="10,0">
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="({0},{1})">
                                        <Binding Path="iBeacon.Major" Mode="OneWay" RelativeSource ="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="iBeacon.Minor" Mode="OneWay" RelativeSource ="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="img_Bluetooth">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource OnLoaded1}"/>
                            </Trigger.EnterActions>
                            <Setter Property="Visibility" TargetName="ellipse" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="border1" Value="Visible"/>
                            <Setter Property="Cursor"  Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:RxView}, ResourceId = RxView}" 
           TargetType="{x:Type ListView}"
           BasedOn="{StaticResource {x:Type ListBox}}">

        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Margin="1,0,0,0" Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:RxView}, ResourceId = RxViewItem}" 
           TargetType="{x:Type ListViewItem}"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="ContentTemplate" Value="{Binding Path= View.ItemTemplate, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListView}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd"  SnapsToDevicePixels="True" >
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Storyboard x:Key="StoryboardLoadIcon" RepeatBehavior="Forever">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="image1">
            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="60"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="120"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.9" Value="180"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="240"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.3" Value="300"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="360"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>


    <Style TargetType="{x:Type local:LoadIcon}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LoadIcon}">
                    <Border>
                        <Image x:Name="image1" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" RenderTransformOrigin="0.5,0.5" Source="/TrboX;component/resource/images/loadicon.png">
                            <Image.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Image.RenderTransform>
                            <Image.Triggers>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                    <BeginStoryboard Storyboard="{StaticResource StoryboardLoadIcon}"/>
                                </EventTrigger>
                            </Image.Triggers>
                        </Image>                     
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
